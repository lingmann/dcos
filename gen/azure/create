#!/usr/bin/env python3

import argparse
import contextlib
import json
import os
import subprocess
import sys

from collections import namedtuple


from_args = namedtuple('Args', 'cluster_name num_masters num_private_slaves template_uri')

USAGE = "%(prog)s <cluster-name> <num-masters> <num-private-slaves> <arm-template-uri>"

REGION = "West US"
ARM_PARAMS = os.path.join(os.path.dirname(__file__), 
                          'azuredeploy-parameters.json')


def load_json(filename):
    try:
        with open(filename) as fp:
            return json.load(fp)
    except ValueError as ex:
        print("ERROR: Invalid JSON in {0}: {1}".format(filename, ex))
        sys.exit(1)


@contextlib.contextmanager
def save_json(dict_in, filename):
    with open(filename, 'w') as fp:
        json.dump(dict_in, fp)
    yield filename


@contextlib.contextmanager
def enable_arm_mode():
    cmd = ['azure', 'config', 'mode', 'arm']
    subprocess.check_call(cmd)
    yield


def create_cluster(cluster_name, region, template_uri, json_seed):
    cmd = [
        "azure", "group", "create", cluster_name, region,
        "--template-uri", template_uri,
        "-d", cluster_name,
        "-e", json_seed,
    ]
    print(' '.join(cmd))
    return subprocess.Popen(cmd, stdout=subprocess.PIPE,
                            stderr=subprocess.STDOUT)


def handle_args():
    parser = argparse.ArgumentParser(usage=USAGE)
    parser.add_argument('positional', nargs=4)
    args = parser.parse_args()

    return from_args(*args.positional)


if __name__ == '__main__':
    args = handle_args()

    params = load_json(ARM_PARAMS)
    params.setdefault('numberOfMasters', {}).setdefault(
        'value', int(args.num_masters))
    params.setdefault('numberOfPrivateSlaves', {}).setdefault(
        'value', int(args.num_private_slaves))

    with save_json(params, '/tmp/params.json') as fname:
        # because arm mode must be enabled before azure group create can be run
        with enable_arm_mode():
            p = create_cluster(args.cluster_name, REGION, args.template_uri, fname)
            for line in iter(p.stdout.readline, b''):
                print(">>> " + line.decode('utf-8').rstrip())

{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Launches a pool of Mesos Slaves",

  "Parameters" : {
    "InstanceAmi" : {
      "Description" : "CoreOS AMI",
      "Type" : "String"
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t1.micro","t2.micro","t2.small","t2.medium","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "InstanceCount" : {
      "Description" : "Number of nodes to launch",
      "Type" : "Number",
      "Default" : 1
    },
    "MesosMaster" : {
      "Description" : "Mesos master connect string (e.g., 'host1:5050,host2:5050')",
      "Type" : "String"
    },
    "MesosMasterInternalELB" : {
      "Description" : "Internal load balancer to find Mesos master.",
      "Type" : "String"
    },
    "MesosMasterSecurityGroup" : {
      "Description" : "Security group of Mesos Master nodes. If passed, CloudFormation will configure the SG to allow access from the launched slaves. If not passed, you'll need to grant this on your own.",
      "Type" : "String",
      "Default" : ""
    },
    "MesosMasterLBSecurityGroup" : {
      "Description" : "Security group of Mesos Master LB. If passed, CloudFormation will configure the SG to allow access from the launched slaves. If not passed, you'll need to grant this on your own.",
      "Type" : "String",
      "Default" : ""
    },
    "AdminSecurityGroup" : {
      "Description" : "Existing security group that should be granted administrative access to Mesos (e.g., 'sg-123456')",
      "Type" : "AWS::EC2::SecurityGroup::Id"
    },
    "Subnets" : {
      "Description" : "List of VPC subnets for the cluster. Must match the passed AvailabilityZones.",
      "Type" : "List<AWS::EC2::Subnet::Id>"
    },
    "VpcId" : {
      "Description" : "VPC associated with the provided subnets",
      "Type" : "AWS::EC2::VPC::Id"
    },
    "AvailabilityZones" : {
      "Description" : "(Optional) If passed, only launch nodes in these AZs (e.g., 'us-east-1a,us-east-1b'). Must match the passed Subnets.",
      "Type" : "CommaDelimitedList",
      "Default" : ""
    },
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "BootstrapRepoRoot" : {
      "Description" : "Root repository for bootstrapping (must end in /)",
      "Type" : "String"
    },

    "StackCreationTimeout" : {
      "Description" : "Timeout on initial stack creation",
      "Type" : "String",
      "Default": "PT30M"
    }
  },

  "Conditions" : {
    "UseAllAvailabilityZones" : {"Fn::Equals" : [{ "Fn::Join" : ["", {"Ref" : "AvailabilityZones"} ]}, ""]},
    "GrantNetworkAcl" : {"Fn::Not" : [{"Fn::Equals" : [{"Ref" : "MesosMasterSecurityGroup"}, ""]}]}
  },

  "Resources" : {
    "ServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : {
          "Fn::If" : [
            "UseAllAvailabilityZones",
            { "Fn::GetAZs" : "" },
            {"Ref" : "AvailabilityZones"}
          ]
        },
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : { "Ref" : "InstanceCount" },
        "MaxSize" : { "Ref" : "InstanceCount" },
        "DesiredCapacity" : { "Ref" : "InstanceCount" },
        "VPCZoneIdentifier" : { "Ref" : "Subnets" },
        "Tags" : [
          {
            "Key" : "role",
            "Value" : "mesos-slave",
            "PropagateAtLaunch" : "true"
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : { "Ref" : "StackCreationTimeout" },
          "Count" : { "Ref" : "InstanceCount" }
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Ref" : "InstanceAmi" },
        "SecurityGroups" : [ { "Ref" : "SecurityGroup" }, { "Ref" : "AdminSecurityGroup" } ],
        "AssociatePublicIpAddress" : "true",
        "InstanceType" : { "Ref" : "InstanceType" },
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
$CLOUD_CONFIG
        ]]}}
      }
    },

    "SecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Mesos Slaves",
        "VpcId" : { "Ref" : "VpcId" }
      }
    },

    "MasterToSlaveIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "GrantNetworkAcl",
      "Properties" : {
        "GroupId" : { "Ref" : "SecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "5051",
        "ToPort" : "5051",
        "SourceSecurityGroupId" : { "Ref" : "MesosMasterSecurityGroup" }
      }
    },
    "SlaveToMasterIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "GrantNetworkAcl",
      "Properties" : {
        "GroupId" : { "Ref" : "MesosMasterSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "5050",
        "ToPort" : "5050",
        "SourceSecurityGroupId" : { "Ref" : "SecurityGroup" }
        }
    },
    "SlaveToMasterDNSUDPIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "GrantNetworkAcl",
      "Properties" : {
        "GroupId" : { "Ref" : "MesosMasterSecurityGroup" },
        "IpProtocol" : "udp",
        "FromPort" : "53",
        "ToPort" : "53",
        "SourceSecurityGroupId" : { "Ref" : "SecurityGroup" }
        }
    },
    "SlaveToMasterDNSTCPIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "GrantNetworkAcl",
      "Properties" : {
        "GroupId" : { "Ref" : "MesosMasterSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "53",
        "ToPort" : "53",
        "SourceSecurityGroupId" : { "Ref" : "SecurityGroup" }
        }
    },
    "SlaveToMasterLBIngress" : {
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Condition" : "GrantNetworkAcl",
      "Properties" : {
        "GroupId" : { "Ref" : "MesosMasterLBSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "2181",
        "ToPort" : "2181",
        "SourceSecurityGroupId" : { "Ref" : "SecurityGroup" }
        }
    }
  }
}

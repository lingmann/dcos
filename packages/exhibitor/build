#!/bin/bash
set -o errexit -o nounset -o pipefail

# Zookeeper

mkdir -p "$PKG_PATH/usr"
cp -rp "/pkg/src/zookeeper" "$PKG_PATH/usr"
rm -rf "$PKG_PATH/usr/zookeeper/"{src,docs,contrib}

mkdir -p "$PKG_PATH/bin"
ln -s "$PKG_PATH/usr/zookeeper/bin/zkCli.sh" "$PKG_PATH/bin/zkCli.sh"

# Exhibitor

# Generate the build artifacts and store in the local cache, to be used later
# during the Maven packaging step.
cd /pkg/src/exhibitor
./gradlew install
./gradlew -b exhibitor-standalone/src/main/resources/buildscripts/standalone/gradle/build.gradle shadowJar

exhibitor_path="$PKG_PATH"/usr/exhibitor
mkdir -p "$exhibitor_path"
pushd "$exhibitor_path"
cp /pkg/src/exhibitor/exhibitor-standalone/src/main/resources/buildscripts/standalone/gradle/build/libs/exhibitor-1.5.6-SNAPSHOT-all.jar exhibitor.jar
popd

exhibitor_service="$PKG_PATH/dcos.target.wants_master/dcos-exhibitor.service"
mkdir -p $(dirname "$exhibitor_service")
cat <<EOF > "$exhibitor_service"
[Unit]
Description=Exhibitor Zookeeper Supervisor
[Service]
StandardOutput=journal
StandardError=journal
Restart=always
StartLimitInterval=0
RestartSec=5
MountFlags=private
RuntimeDirectory=dcos_exhibitor
EnvironmentFile=/opt/mesosphere/environment
EnvironmentFile=/opt/mesosphere/etc/dns_config
EnvironmentFile=/opt/mesosphere/etc/exhibitor
# run in new mount namespace to create custom resolv.conf
ExecStart=/usr/bin/unshare --mount $PKG_PATH/usr/exhibitor/start_exhibitor.py
EOF

exhibitor_start_wrapper="$PKG_PATH/usr/exhibitor/start_exhibitor.py"
cat <<EOFWrapperScript > "$exhibitor_start_wrapper"
#!/opt/mesosphere/bin/python
import os
import sys
from subprocess import check_call, check_output


def get_var_assert_set(name):
    if name not in os.environ:
        print('ERROR: "{}" must be set'.format(name))
        sys.exit(1)

    return os.environ[name]


def write_str(filename, contents):
    with open(filename, 'w') as f:
        f.write(contents)

# TODO(cmaloney): Move exhibitor_defaults to a temp runtime conf dir.
# Base for building up the command line
exhibitor_cmdline = [
    'java',
    '-jar', '$PKG_PATH/usr/exhibitor/exhibitor.jar',
    '--port', '8181',
    '--defaultconfig', '/run/dcos_exhibitor/exhibitor_defaults.conf',
    '--hostname', check_output(['/opt/mesosphere/bin/detect_ip']).strip()
]

# Make necessary exhibitor runtime directories
check_call(['mkdir', '-p', '/var/lib/zookeeper/snapshot'])
check_call(['mkdir', '-p', '/var/lib/zookeeper/transactions'])

# Older systemd doesn't support RuntimeDirectory, make one if systemd didn't.
check_call(['mkdir', '-p', '/run/dcos_exhibitor'])

# Write out base exhibitor configuration
write_str('/run/dcos_exhibitor/exhibitor_defaults.conf', """
# These Exhibitor properties are used to first initialize the config stored in
# an empty shared storage location. Any subsequent invocations of Exhibitor will
# ignore these properties and use the config found in shared storage.
zookeeper-data-directory=/var/lib/zookeeper/snapshot
zookeeper-install-directory=/opt/mesosphere/active/exhibitor/usr/zookeeper
zookeeper-log-directory=/var/lib/zookeeper/transactions
log-index-directory=/var/lib/zookeeper/transactions
cleanup-period-ms=300000
check-ms=30000
backup-period-ms=600000
client-port=2181
cleanup-max-files=20
backup-max-store-ms=21600000
connect-port=2888
observer-threshold=0
election-port=3888
zoo-cfg-extra=tickTime\=2000&initLimit\=10&syncLimit\=5&quorumListenOnAllIPs\=true&maxClientCnxns\=0&autopurge.snapRetainCount\=5&autopurge.purgeInterval\=6
auto-manage-instances-settling-period-ms=0
auto-manage-instances=1
auto-manage-instances-fixed-ensemble-size={zookeeper_cluster_size}
""".format(
        zookeeper_cluster_size=get_var_assert_set('ZOOKEEPER_CLUSTER_SIZE')
    ))

# Make a custom /etc/resolv.conf and mount it for exhibitor
resolvers = get_var_assert_set('RESOLVERS').split(',')
resolvconf_text = '# Generated for exhibitor by start_exhibitor.py\n'
for resolver in resolvers:
    resolvconf_text += "nameserver {}\n".format(resolver)
write_str("/run/dcos_exhibitor/resolv.conf", resolvconf_text)

# Bind mount the resolv.conf. Do a "--make-rprivate" to guarantee the
# "/etc/resolv.conf" of the system isn't overriden. The systemd unit running
# this _should_ have already made the mounts private, but we do this here as an
# extra bit of safety.
check_call(['mount', '--make-rprivate', '/'])
check_call(['mount', '--bind', '/run/dcos_exhibitor/resolv.conf', '/etc/resolv.conf'])

# Add backend specific arguments
exhibitor_backend = get_var_assert_set('EXHIBITOR_BACKEND')
if exhibitor_backend == 'AWS_S3':
    print("Exhibitor configured for AWS S3")
    exhibitor_cmdline += [
            '--configtype=s3',
            '--s3config', get_var_assert_set("AWS_S3_BUCKET") + ':' + get_var_assert_set("AWS_S3_PREFIX"),
            '--s3credentials', '/opt/mesosphere/etc/exhibitor.properties',
            '--s3region', get_var_assert_set("AWS_REGION"),
            '--s3backup', 'false',
        ]
elif exhibitor_backend == 'AZURE':
    print("Exhibitor configured for Azure")
    exhibitor_cmdline += [
        '--configtype=azure',
        '--azureconfig', get_var_assert_set('AZURE_CONTAINER') + ':' + get_var_assert_set('AZURE_PREFIX'),
        '--azurecredentials', '/opt/mesosphere/etc/exhibitor.properties',
    ]
elif exhibitor_backend == 'GCE':
    print("Exhibitor configured for GCE")
    exhibitor_cmdline += [
        '--configtype=gcs',
        '--gcsconfig={}:{}'.format(get_var_assert_set('GCS_BUCKET_NAME', 'GCE_BUCKET_NAME'))
    ]
elif exhibitor_backend == 'ZK':
    print("Exhibitor configured for Zookeeper")
    exhibitor_cmdline += [
        '--configtype=zookeeper',
        '--zkconfigconnect={}'.format(get_var_assert_set('ZK_CONFIG_CONNECT')),
        '--zkconfigzpath={}'.format(get_var_assert_set('ZK_CONFIG_ZPATH'))
    ]
elif exhibitor_backend == 'SHARED_FS':
    print("Exhibitor configured for shared filesystem")
    exhibitor_cmdline += [
        '--configtype=file',
        '--fsconfigdir', get_var_assert_set('EXHIBITOR_FSCONFIGDIR')
    ]
else:
    print("ERROR: No known exhibitor backend:", exhibitor_backend)
    sys.exit(1)

# Start exhibitor
print("Running exhibitor as command:", exhibitor_cmdline)
sys.stdout.flush()
os.execv('/opt/mesosphere/bin/java', exhibitor_cmdline)
EOFWrapperScript
chmod +x "$exhibitor_start_wrapper"

exhibitor_wait="$PKG_PATH/bin/exhibitor_wait.py"
cat <<'EOF' > "$exhibitor_wait"
#!/opt/mesosphere/bin/python

import sys
import json
import codecs
import urllib.request

EXIHIBITOR_STATUS_URL = 'http://127.0.0.1:8181/exhibitor/v1/cluster/status'

if len(sys.argv) != 2:
    print('Usage: exhibitor_wait.py ZOOKEEPER_CLUSTER_SIZE', file=sys.stderr)
    sys.exit(-1)
cluster_size = int(sys.argv[1])

try:
    response = urllib.request.urlopen(EXIHIBITOR_STATUS_URL)
except urllib.error.URLError:
    print('Could not get exhibitor status: {}'.format(EXIHIBITOR_STATUS_URL), file=sys.stderr)
    sys.exit(1)
reader = codecs.getreader("utf-8")
data = json.load(reader(response))

serving = 0
leaders = 0
for node in data:
    if node['isLeader']:
        leaders += 1
    if node['description'] == 'serving':
        serving += 1

if serving != cluster_size or leaders != 1:
    print('Expected {} servers and 1 leader, got {} servers and {} leaders'.format(cluster_size, serving, leaders), file=sys.stderr)
    sys.exit(1)

sys.exit(0)
EOF
chmod +x "$exhibitor_wait"

#!/bin/bash

libdir="$PKG_PATH/lib"

mkdir -p "/build"

# TODO(cmaloney): Set alternate log, config paths?
pushd "/pkg/src/nginx"
./configure \
  "--prefix=$PKG_PATH" \
  --with-ipv6 \
  --with-file-aio \
  --with-http_gunzip_module \
  --with-http_gzip_static_module \
  --with-http_spdy_module \
  --without-mail_pop3_module \
  --without-mail_imap_module \
  --without-mail_smtp_module

make -j8
make install

popd

# Copy  in needed libraries
mkdir -p "$PKG_PATH/lib"
cp /lib/x86_64-linux-gnu/libpcre.so.3 "$PKG_PATH/lib/libpcre.so.3"

# Write the config
rm -rf "$PKG_PATH/conf/nginx.conf"

# TODO(cmaloney): Make config outside of nginx package?
cat <<EOF > "$PKG_PATH/conf/nginx.conf"
error_log stderr;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;

  sendfile on;
  keepalive_timeout 65;

  upstream mesos {
    server leader.mesos:5050;
  }

  upstream marathon {
    server master.mesos:8080;
  }

  server {
    listen 80 default_server;
    server_name dcos.*;
    root /opt/mesosphere/active/dcos-ui/usr;

    # TODO(cmaloney): Make the Web UI work in a subdirectory.
    location /mesos/ {
        proxy_pass http://mesos/;
    }

    # TODO(cmaloney): Make the Web UI work in a subdirectory.
    location /marathon/ {
        proxy_pass http://marathon/;
    }

    location /pkgpanda/active.buildinfo.full.json {
      add_header Cache-Control "no-cache";
      alias /opt/mesosphere/active.buildinfo.full.json;
    }
  }

  server {
    listen 80;
    server_name mesos.*;
    location / {
      proxy_pass http://mesos/;
    }
  }

  server {
    listen 80;
    server_name marathon.*;
    location / {
      proxy_pass http://marathon/;
    }
  }

  # Seperate ports for when there isn't DNS pointing to the load balancer.
  server {
    listen 1024;
    location / {
      proxy_pass http://mesos/;
    }
  }
}
EOF

# From: https://projects.archlinux.org/svntogit/packages.git/tree/trunk/service?h=packages/nginx
systemd_master="$PKG_PATH"/dcos.target.wants_master/nginx.service
mkdir -p "$(dirname "$systemd_master")"
cat <<EOF > "$systemd_master"
[Unit]
Description=A high performance web server and a reverse proxy server
After=mesos-dns.service
Requires=mesos-dns.service

[Service]
Restart=on-failure
StartLimitInterval=0
RestartSec=5
EnvironmentFile=/etc/environment
EnvironmentFile=/opt/mesosphere/environment
Type=forking
PIDFile=$PKG_PATH/logs/nginx.pid
PrivateDevices=yes
SyslogLevel=err

ExecStart=$PKG_PATH/sbin/nginx
ExecReload=/usr/bin/kill -HUP \$MAINPID
KillSignal=SIGQUIT
KillMode=mixed
EOF

systemd_master_reload="$PKG_PATH"/dcos.target.wants_master/nginx-reload.service
mkdir -p "$(dirname "$systemd_master_reload")"
cat <<EOF > "$systemd_master_reload"
[Unit]
Description=Reload nginx

[Service]
Type=oneshot
EnvironmentFile=/etc/environment
EnvironmentFile=/opt/mesosphere/environment
ExecStart=$PKG_PATH/sbin/nginx -s reload
EOF

systemd_master_timer="$PKG_PATH"/dcos.target.wants_master/nginx-reload.timer
mkdir -p "$(dirname "$systemd_master_timer")"
cat <<EOF > "$systemd_master_timer"
[Unit]
Description=Periodically reload nginx config to pickup new dns
[Timer]
OnBootSec=0min
OnUnitActiveSec=30s
EOF

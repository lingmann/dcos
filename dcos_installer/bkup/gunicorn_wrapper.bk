import logging
import multiprocessing

from dcos_installer.async_server import app

import gunicorn.app.wsgiapp

log = logging.getLogger(__name__)


# Get a safe number of workers to run on this host
def number_of_workers():
    return (multiprocessing.cpu_count() * 2) + 1

# Define a Gunicorn custom web application and pass it the
# aiohttp app to run inside its thread safe servlet.


class InstallerApi(gunicorn.app.wsgiapp.WSGIApplication):
    """
    Custom Gunicorn app
    """
    def __init__(self, run_this_app, options=None):
        self.options = options
        self.application = run_this_app
        #super().__init__()
        super(InstallerApi, self).__init__()

    def load_config(self):
        config = dict([(key, value) for key, value in self.options.items()
                       if key in self.cfg.settings and value is not None])
        for key, value in config.items():
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


def run_gunicorn(cli_args):
    options = {
        'bind': '0.0.0.0:{}'.format(cli_args.port),
        'workers': 1,  # number_of_workers(),
        'worker_class': 'aiohttp.worker.GunicornWebWorker',
    }
    log.info(options)
    InstallerApi(app, options).run()

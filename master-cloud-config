#cloud-config
coreos:
  units:
    - name: bootstrap.service
      command: start
      content: |
        [Unit]
        Description=Bootstrap DCOS
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/wget -nv https://s3.amazonaws.com/downloads.mesosphere.io/dcos/bootstrap.sh -O /bootstrap.sh
        ExecStartPre=/usr/bin/chmod +x /bootstrap.sh
        ExecStart=/bootstrap.sh
    - name: mesos-dns.service
      command: start
      content: |
        [Unit]
        Description=Mesos-DNS
        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill mesos-dns
        ExecStartPre=-/usr/bin/docker rm mesos-dns
        ExecStartPre=/usr/bin/docker pull mesosphere/mesos-dns
        ExecStart=/bin/sh -c 'docker run --name=mesos-dns --net=host -t mesosphere/mesos-dns /bin/sh -c \'echo "{\\"masters\\":[\\"127.0.0.1:5050\\"],\\"refreshSeconds\\":60,\\"ttl\\":60,\\"domain\\":\\"mesos\\",\\"port\\":53,\\"resolvers\\":[\\"172.16.0.23\\"],\\"timeout\\":5}" > /derp.json && /mesos-dns -v -config=/derp.json\''
    - name: zookeeper.service
      command: start
      content: |
        [Unit]
        Description=Zookeeper
        After=bootstrap.service
        Requires=bootstrap.service
        EnvironmentFile=/etc/mesosphere/cloudenv
        [Service]
        Restart=on-failure
        ExecStartPre=/usr/bin/bash -c "/usr/bin/systemctl set-environment EC2_PUBLIC_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)"
        ExecStart=/usr/bin/docker run --rm -p 8181:8181 -p 2181:2181 -p 2888:2888 -p 3888:3888 \
        -e AWS_REGION={ "Ref" : "AWS::Region" } \
        -e S3_BUCKET={ "Ref" : "ExhibitorS3Bucket" } \
        -e S3_PREFIX=exhibitor \
        -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
        -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
        -e HOSTNAME=${EC2_PUBLIC_HOSTNAME} \
        thefactory/zookeeper-exhibitor:3.4.6_1.5.2
    - name: mesos-master.service
      command: start
      content: |
        [Unit]
        Description=Mesos Master
        After=zookeeper.service
        Requires=zookeeper.service
        EnvironmentFile=/etc/environment
        [Service]
        ExecStartPre=/usr/bin/bash -c "/usr/bin/systemctl set-environment EC2_PUBLIC_HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)"
        ExecStart=/opt/mesosphere/dcos/latest/mesos/sbin/mesos-master \
        --log_dir=/var/log/mesos \
        --work_dir=/var/lib/mesos/master \
        --zk=zk://${EC2_PUBLIC_HOSTNAME}:2181/mesos \
        --hostname=${EC2_PUBLIC_HOSTNAME} \
        --cluster={ "Ref" : "AWS::StackName" } \
        --quorum={ "Ref" : "QuorumSize" }
    - name: cfn-signal.service
      command: start
      content: |
        [Unit]
        Description=Signal CloudFormation Success
        After=bootstrap.service
        Requires=bootstrap.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap
        ExecStartPre=/usr/bin/docker pull mbabineau/cfn-bootstrap
        ExecStart=/usr/bin/docker run --rm mbabineau/cfn-bootstrap \
          cfn-signal -e 0 \
          --resource ServerGroup \
          --stack { "Ref" : "AWS::StackName" } \
          --region { "Ref" : "AWS::Region" }

write_files:
    - path: /etc/mesosphere/cloudenv
      permissions: 0644
      owner: root
      content: |
        AWS_REGION={ "Ref" : "AWS::Region" }
        EXHIBITOR_S3_BUCKET={ "Ref" : "ExhibitorS3Bucket" }
        STACKNAME={ "Ref" : "AWS::StackName" }
        MESOS_MASTER_INTERNAL_ELB={ "Fn::GetAtt" : [ "InternalMasterLoadBalancer", "DNSName" ] }
        MESOS_MASTER_EXTERNAL_ELB={ "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ] }
        MASTER_INSTANCE_COUNT={ "Ref" : "InstanceCount" }
        QUORUM_SIZE={ "Ref" : "QuorumSize" }
        MACHINE_IMAGE={ "Ref" : "InstanceAmi" }
        AWS_ACCESS_KEY_ID={ "Ref" : "HostKeys" }
        AWS_SECRET_ACCESS_KEY={ "Fn::GetAtt" : [ "HostKeys", "SecretAccessKey" ] }

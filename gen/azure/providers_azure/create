#!/usr/bin/env python3

import json
import os
import subprocess
import sys


if len(sys.argv) != 4:
    print("Usage: {} <cluster-name> <num-masters> <num-private-slaves>".format(sys.argv[0]))
    sys.exit(1)

my_dir = os.path.dirname(sys.argv[0])
cluster_name = sys.argv[1]
num_masters = sys.argv[2]
num_private_slaves = sys.argv[3]
region = "West US"
arm_template = "{}/azuredeploy.json".format(my_dir)
arm_params = "{}/azuredeploy-parameters.json".format(my_dir)
gen_azure_script = "{}/gen_azure_custom_data.py".format(my_dir)
master_yaml = "{}/azure-master.yaml".format(my_dir)
private_slave_yaml = "{}/azure-private-slave.yaml".format(my_dir)


def load_json(filename):
    try:
        with open(filename) as fname:
            return json.load(fname)
    except ValueError as ex:
        print("ERROR: Invalid JSON in {0}: {1}".format(filename, ex))
        sys.exit(1)


def save_json(dict_in, filename):
    with open(filename, 'w') as fname:
        json.dump(dict_in, fname)

params = load_json(arm_params)
params.setdefault('numberOfMasters', {}).setdefault('value', int(num_masters))
params.setdefault('numberOfPrivateSlaves', {}).setdefault('value', int(num_private_slaves))
save_json(params, '/tmp/params.json')

arm = load_json(arm_template)
master_cloud_config = subprocess.check_output(
    [gen_azure_script, master_yaml]).decode('utf-8')
private_slave_cloud_config = subprocess.check_output(
    [gen_azure_script, private_slave_yaml]).decode('utf-8')

for resource in arm['resources']:
    try:
        if resource['properties']['osProfile']['customData'] == "MASTER_CLOUD_CONFIG":
            resource['properties']['osProfile']['customData'] = master_cloud_config
        if resource['properties']['osProfile']['customData'] == "PRIVATE_SLAVE_CLOUD_CONFIG":
            resource['properties']['osProfile']['customData'] = private_slave_cloud_config
    except KeyError:
        pass

save_json(arm, '/tmp/arm.json')

cmd = [
    "azure", "group", "create", cluster_name, region,
    "-f", "/tmp/arm.json", "-d", cluster_name, "-e", "/tmp/params.json"]
p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

for line in iter(p.stdout.readline, b''):
    print(">>> " + line.decode('utf-8').rstrip())

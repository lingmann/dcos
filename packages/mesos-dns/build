#!/bin/bash
set -x

# Setup go environment
mkdir -p /go/src/github.com/mesosphere
ln -s /pkg/src/mesos-dns /go/src/github.com/mesosphere/mesos-dns
export GOPATH=/go
export GOROOT=/pkg/src/go/
export PATH=$PATH:$GOROOT/bin

# Get the dependencies
go get github.com/gogo/protobuf/proto
go get github.com/golang/glog
go get github.com/mesos/mesos-go/detector
go get github.com/mesos/mesos-go/mesosproto
go get github.com/mesos/mesos-go/mesosutil
go get github.com/mesos/mesos-go/upid
go get github.com/miekg/dns
go get github.com/samuel/go-zookeeper/zk
go get github.com/stretchr/objx
go get github.com/stretchr/testify/assert
go get github.com/stretchr/testify/mock
go get golang.org/x/net/context

# Build mesos-dns
pushd /go/src/github.com/mesosphere/mesos-dns
go build
popd

# TODO(cmaloney): PKG_PATH should always exist in the container
# Install to pkg-path
mkdir -p $PKG_PATH/bin
cp /go/src/github.com/mesosphere/mesos-dns/mesos-dns $PKG_PATH/bin/mesos-dns


# Create the service file
service="$PKG_PATH/dcos.target.wants_master/mesos-dns.service"
mkdir -p "$(dirname "$service")"
cat <<EOF > "$service"
[Unit]
Description=Mesos DNS
[Service]
Restart=on-failure
StartLimitInterval=0
RestartSec=5
EnvironmentFile=/etc/environment
EnvironmentFile=/opt/mesosphere/environment
ExecStart=/opt/mesosphere/bin/mesos-dns --config=/opt/mesosphere/etc/mesos-dns.json -logtostderr=true -v=2
EOF

resolvconf_service="$PKG_PATH/dcos.target.wants_slave/gen_resolvconf.service"
mkdir -p "$(dirname "$resolvconf_service")"
cat <<'EOF' > "$resolvconf_service"
[Unit]
Description=Generate resolv.conf to use mesos-dns
[Service]
Type=simple
EnvironmentFile=/etc/environment
EnvironmentFile=/opt/mesosphere/environment
EnvironmentFile=/opt/mesosphere/etc/cloudenv
ExecStart=/opt/mesosphere/bin/gen_resolvconf.py $MASTER_ELB $FALLBACK_DNS /etc/resolv.conf
EOF

resolvconf_timer="$PKG_PATH/dcos.target.wants_slave/gen_resolvconf.timer"
mkdir -p "$(dirname "$resolvconf_timer")"
cat <<'EOF' > "$resolvconf_timer"
[Unit]
Description=Update resolv.conf every 2 minutes
[Timer]
OnBootSec=0min
OnUnitActiveSec=2min
Unit=gen_resolvconf.service
EOF

gen_resolvconf="$PKG_PATH/bin/gen_resolvconf.py"
cat <<'EOF' > "$gen_resolvconf"
#!/opt/mesosphere/bin/python

import socket
import sys
import json
import codecs
import urllib.request

EXHIBITOR_STATUS_URL = 'http://{}:8181/exhibitor/v1/cluster/status'

if len(sys.argv) != 4:
    print('Usage: gen_resolvconf.py MASTER_ADDRESS FALLBACK_DNS RESOLV_CONF_PATH', file=sys.stderr)
    sys.exit(-1)
status_url = EXHIBITOR_STATUS_URL.format(sys.argv[1])
fallback_dns = sys.argv[2]
resolvconf_path = sys.argv[3]

try:
    response = urllib.request.urlopen(status_url)
except urllib.error.URLError:
    print('Could not get exhibitor status: {}'.format(status_url), file=sys.stderr)
    sys.exit(1)
reader = codecs.getreader("utf-8")
data = json.load(reader(response))

servers = []
for node in data:
    addr = socket.gethostbyname(node['hostname'])
    servers.append(addr)

if len(servers) == 0:
    servers.append(fallback_dns)

with open(resolvconf_path, 'w') as f:
    for addr in servers:
        print("nameserver {}".format(addr), file=f)
        print("nameserver {}".format(addr))

sys.exit(0)
EOF
chmod +x "$gen_resolvconf"

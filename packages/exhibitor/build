#!/bin/bash
set -o errexit -o nounset -o pipefail

# Zookeeper

mkdir -p "$PKG_PATH/usr"
cp -rp "/pkg/src/zookeeper" "$PKG_PATH/usr"
rm -rf "$PKG_PATH/usr/zookeeper/"{src,docs,contrib}

# Exhibitor

# Generate the build artifacts and store in the local cache, to be used later
# during the Maven packaging step.
cd /pkg/src/exhibitor
./gradlew install

exhibitor_path="$PKG_PATH"/usr/exhibitor
mkdir -p "$exhibitor_path"
pushd "$exhibitor_path"

cat <<- 'EOF' > pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>exhibitor</groupId>
    <artifactId>exhibitor</artifactId>
    <version>1.0</version>

    <dependencies>
        <dependency>
            <groupId>com.netflix.exhibitor</groupId>
            <artifactId>exhibitor-standalone</artifactId>
            <version>1.5.6-SNAPSHOT</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.3</version>
                <configuration>
                    <createDependencyReducedPom>false</createDependencyReducedPom>
                    <filters>
                        <filter>
                            <artifact>*:*</artifact>
                            <excludes>
                                <exclude>META-INF/*.SF</exclude>
                                <exclude>META-INF/*.DSA</exclude>
                                <exclude>META-INF/*.RSA</exclude>
                            </excludes>
                        </filter>
                    </filters>
                    <transformers>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                        <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                            <mainClass>com.netflix.exhibitor.application.ExhibitorMain</mainClass>
                        </transformer>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <id>zookeeper</id>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
EOF

mvn clean package

ln -s target/exhibitor-1.0.jar exhibitor.jar
# Make sure we linked to something that exists
test -e exhibitor.jar
rm pom.xml
popd

exhibitor_service="$PKG_PATH/dcos.target.wants_master/exhibitor.service"
mkdir -p $(dirname "$exhibitor_service")
cat <<- EOF > "$exhibitor_service"
[Unit]
Description=Exhibitor Zookeeper Supervisor
[Service]
Restart=always
EnvironmentFile=/etc/environment
EnvironmentFile=/opt/mesosphere/environment
EnvironmentFile=/opt/mesosphere/etc/cloudenv
EnvironmentFile=/opt/mesosphere/etc/exhibitor
# run in new mount namespace to create custom resolv.conf
ExecStart=/usr/bin/unshare --mount $PKG_PATH/usr/exhibitor/start_exhibitor.sh
EOF

exhibitor_start_wrapper="$PKG_PATH/usr/exhibitor/start_exhibitor.sh"
cat <<EOFWrapperScript > "$exhibitor_start_wrapper"
#!/bin/bash
set -o errexit -o nounset -o pipefail

#: \${ZOOKEEPER_CLUSTER_SIZE:?"ERROR: ZOOKEEPER_CLUSTER_SIZE must be set"}
#: \${FALLBACK_DNS:?"ERROR: FALLBACK_DNS must be set"}
#: \${EXHIBITOR_HOSTNAME:?"ERROR: EXHIBITOR_HOSTNAME must be set"}
#: \${EXHIBITOR_WEB_UI_PORT:?"ERROR: EXHIBITOR_WEB_UI_PORT must be set"}

exhibitor_defaults=/etc/mesosphere/exhibitor_defaults.conf
exhibitor_properties=/etc/mesosphere/exhibitor_credentials.properties

/bin/mkdir -p /var/lib/zookeeper/snapshot
/bin/mkdir -p /var/lib/zookeeper/transactions

cat <<EOFProperties > \$exhibitor_properties
com.netflix.exhibitor.s3.access-key-id=\${AWS_ACCESS_KEY_ID:-}
com.netflix.exhibitor.s3.access-secret-key=\${AWS_SECRET_ACCESS_KEY:-}
com.netflix.exhibitor.azure.account-name=\${AZURE_ACCOUNT_NAME:-}
com.netflix.exhibitor.azure.account-key=\${AZURE_ACCOUNT_KEY:-}
EOFProperties

cat <<EOFDefaults > \$exhibitor_defaults
# These Exhibitor properties are used to first initialize the config stored in
# an empty shared storage location. Any subsequent invocations of Exhibitor will
# ignore these properties and use the config found in shared storage.
zookeeper-data-directory=/var/lib/zookeeper/snapshot
zookeeper-install-directory=/opt/mesosphere/active/exhibitor/usr/zookeeper
zookeeper-log-directory=/var/lib/zookeeper/transactions
log-index-directory=/var/lib/zookeeper/transactions
cleanup-period-ms=300000
check-ms=30000
backup-period-ms=600000
client-port=2181
cleanup-max-files=20
backup-max-store-ms=21600000
connect-port=2888
observer-threshold=0
election-port=3888
zoo-cfg-extra=tickTime\=2000&initLimit\=10&syncLimit\=5&quorumListenOnAllIPs\=true
auto-manage-instances-settling-period-ms=0
auto-manage-instances=1
auto-manage-instances-fixed-ensemble-size=\$ZOOKEEPER_CLUSTER_SIZE
EOFDefaults

echo "nameserver \$FALLBACK_DNS" > /etc/resolv.conf.exhibitor
# do not propagate mounts to the previous namespaces
mount --make-rprivate /
# "overwrite" resolv.conf for exhibitor and all its children
mount --bind /etc/resolv.conf.exhibitor /etc/resolv.conf

if [[ -n "\${AWS_ACCESS_KEY_ID:-}" && \\
      -n "\${AWS_SECRET_ACCESS_KEY:-}" && \\
      -n "\${AWS_S3_BUCKET:-}" && \\
      -n "\${AWS_S3_PREFIX:-}" && \\
      -n "\${AWS_REGION:-}" ]]
then
  echo "Starting Exhibitor for AWS"
  exec /opt/mesosphere/bin/java -jar "$PKG_PATH/usr/exhibitor/exhibitor.jar" \\
    --port \$EXHIBITOR_WEB_UI_PORT \\
    --defaultconfig \$exhibitor_defaults \\
    --configtype s3 --s3config "\$AWS_S3_BUCKET:\$AWS_S3_PREFIX" \\
    --s3credentials \$exhibitor_properties \\
    --s3region \$AWS_REGION --s3backup false --hostname \$EXHIBITOR_HOSTNAME
elif [[ -n "\${AZURE_ACCOUNT_NAME:-}" && \\
        -n "\${AZURE_ACCOUNT_KEY:-}" && \\
        -n "\${AZURE_PREFIX:-}" && \\
        -n "\${AZURE_CONTAINER:-}" ]]
then
  echo "Starting Exhibitor for Azure"
  exec /opt/mesosphere/bin/java -jar "$PKG_PATH/usr/exhibitor/exhibitor.jar" \\
    --port \$EXHIBITOR_WEB_UI_PORT \\
    --defaultconfig \$exhibitor_defaults \\
    --configtype=azure --azureconfig="\$AZURE_CONTAINER:\$AZURE_PREFIX" \\
    --azurecredentials \$exhibitor_properties \\
    --hostname \$EXHIBITOR_HOSTNAME
else
  echo "ERROR: Missing one or more required environment variables"
  exit 1
fi

EOFWrapperScript
chmod +x "$exhibitor_start_wrapper"

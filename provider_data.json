{"azure": {"extra_packages": ["dcos-detect-ip--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b", "dcos-metadata--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b", "dcos-config--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b"], "files": [{"known_path": "azure/single-master.azuredeploy.json", "stable_path": "azure/04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b.single-master.azuredeploy.json", "content": "{\"outputs\": {\"masterFQDN0\": {\"type\": \"string\", \"value\": \"[reference('masterPublicIP0').dnsSettings.fqdn]\"}, \"slavePublicFQDN0\": {\"type\": \"string\", \"value\": \"[reference('slavePublicIP0').dnsSettings.fqdn]\"}}, \"parameters\": {\"numberOfPublicSlaves\": {\"allowedValues\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], \"defaultValue\": 1, \"type\": \"int\", \"metadata\": {\"Description\": \"Number of Public Slave nodes\"}}, \"sshKeyData\": {\"defaultValue\": \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmg2uuk5tta2sC//1uPYkRIRnekIEj7hA+oElyJgUNPQhzAIC7aspnYa/ChI/o6pEk4LdacXL2rW6twg8Dnd+n+AUpNfFOWe5yG8oTGhBVpvhr9c0NYgbTCzAEJaFHBeA8JfjpXpwDzDIsSa0wY3dfsu3BATReOVh9J9L9gEr3uj076avbXase/C6IYZndWwZbPXnTUEQiDsdh6kWWp2yuRJ2WVqnImvBk15bZBGI7EhadPuai87ZziG1A/6k2dgRV3nOQXPrUAwrdVG6vLig8k8lHnmpMs/QAqHQD+7BnnlUicMSJutvPB0SbeNVT0yY1eRc62NdFqu7e+w9VrcGh\", \"type\": \"string\", \"metadata\": {\"Description\": \"Public key for SSH authentication\"}}, \"numberOfPrivateSlaves\": {\"allowedValues\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], \"defaultValue\": 5, \"type\": \"int\", \"metadata\": {\"Description\": \"Number of Private Slave nodes\"}}, \"numberOfMasters\": {\"allowedValues\": [1, 3, 5, 7], \"defaultValue\": 1, \"type\": \"int\", \"metadata\": {\"Description\": \"Number of Master nodes\"}}, \"authorizedSubnet\": {\"defaultValue\": \"0.0.0.0/0\", \"type\": \"string\", \"metadata\": {\"Description\": \"Subnet allowed to talk to masters\"}}, \"region\": {\"allowedValues\": [\"East US\", \"West US\", \"West Europe\", \"East Asia\", \"Southeast Asia\"], \"type\": \"string\", \"defaultValue\": \"West US\"}, \"vmsPerStorageAccount\": {\"allowedValues\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], \"defaultValue\": 10, \"type\": \"int\", \"metadata\": {\"Description\": \"Number of VMs per Storage Account\"}}}, \"$schema\": \"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\", \"contentVersion\": \"1.0.0.0\", \"resources\": [{\"properties\": {\"accountType\": \"[variables('storageAccountType')]\"}, \"type\": \"Microsoft.Storage/storageAccounts\", \"apiVersion\": \"2015-05-01-preview\", \"location\": \"[parameters('region')]\", \"name\": \"[variables('storageAccountName')]\"}, {\"properties\": {\"accountType\": \"[variables('storageAccountType')]\"}, \"type\": \"Microsoft.Storage/storageAccounts\", \"apiVersion\": \"2015-05-01-preview\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[variables('storageAccountsCount')]\", \"name\": \"vmLoopNode\"}, \"name\": \"[concat(variables('storageAccountPrefix')[mod(copyIndex(),variables('storageAccountPrefixCount'))],variables('storageAccountPrefix')[div(copyIndex(),variables('storageAccountPrefixCount'))],variables('uniqueName'))]\"}, {\"properties\": {}, \"type\": \"Microsoft.Compute/availabilitySets\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"name\": \"masters\"}, {\"properties\": {\"securityRules\": [{\"properties\": {\"access\": \"Allow\", \"protocol\": \"*\", \"sourceAddressPrefix\": \"168.63.129.16/32\", \"priority\": 100, \"direction\": \"Inbound\", \"description\": \"Allow Azure Internal Management Traffic\", \"destinationPortRange\": \"*\", \"sourcePortRange\": \"*\", \"destinationAddressPrefix\": \"*\"}, \"name\": \"Allow_Azure_Management\"}, {\"properties\": {\"access\": \"Deny\", \"protocol\": \"*\", \"sourceAddressPrefix\": \"Internet\", \"priority\": 200, \"direction\": \"Inbound\", \"description\": \"Block access to SSH to Public Slaves\", \"destinationPortRange\": \"22\", \"sourcePortRange\": \"*\", \"destinationAddressPrefix\": \"*\"}, \"name\": \"Block_SSH\"}, {\"properties\": {\"access\": \"Deny\", \"protocol\": \"*\", \"sourceAddressPrefix\": \"Internet\", \"priority\": 300, \"direction\": \"Inbound\", \"description\": \"Block access to Mesos Slave process to Public Slaves\", \"destinationPortRange\": \"5051\", \"sourcePortRange\": \"*\", \"destinationAddressPrefix\": \"*\"}, \"name\": \"Block_Mesos_Agent\"}, {\"properties\": {\"access\": \"Allow\", \"protocol\": \"*\", \"sourceAddressPrefix\": \"Internet\", \"priority\": 400, \"direction\": \"Inbound\", \"description\": \"Allow Internet traffic to Public Slave Agents\", \"destinationPortRange\": \"*\", \"sourcePortRange\": \"*\", \"destinationAddressPrefix\": \"*\"}, \"name\": \"Allow_Internet\"}]}, \"type\": \"Microsoft.Network/networkSecurityGroups\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"name\": \"[variables('slavePublicSecurityGroupName')]\"}, {\"properties\": {\"securityRules\": [{\"properties\": {\"access\": \"Allow\", \"protocol\": \"*\", \"sourceAddressPrefix\": \"168.63.129.16/32\", \"priority\": 100, \"direction\": \"Inbound\", \"description\": \"Allow Azure Internal Management Traffic\", \"destinationPortRange\": \"*\", \"sourcePortRange\": \"*\", \"destinationAddressPrefix\": \"*\"}, \"name\": \"Allow_Azure_Management\"}]}, \"type\": \"Microsoft.Network/networkSecurityGroups\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"name\": \"[variables('slavePrivateSecurityGroupName')]\"}, {\"properties\": {\"securityRules\": [{\"properties\": {\"access\": \"Allow\", \"protocol\": \"*\", \"sourceAddressPrefix\": \"168.63.129.16/32\", \"priority\": 100, \"direction\": \"Inbound\", \"description\": \"Allow Azure Internal Management Traffic\", \"destinationPortRange\": \"*\", \"sourcePortRange\": \"*\", \"destinationAddressPrefix\": \"*\"}, \"name\": \"Allow_Azure_Management\"}, {\"properties\": {\"access\": \"Allow\", \"protocol\": \"*\", \"sourceAddressPrefix\": \"[parameters('authorizedSubnet')]\", \"priority\": 200, \"direction\": \"Inbound\", \"description\": \"Allow Subnet\", \"destinationPortRange\": \"*\", \"sourcePortRange\": \"*\", \"destinationAddressPrefix\": \"*\"}, \"name\": \"Allow_Subnet\"}]}, \"type\": \"Microsoft.Network/networkSecurityGroups\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"name\": \"[variables('masterSecurityGroupName')]\"}, {\"properties\": {\"subnets\": [{\"properties\": {\"addressPrefix\": \"[variables('privateSubnetPrefix')]\"}, \"name\": \"[variables('privateSubnetName')]\"}, {\"properties\": {\"addressPrefix\": \"[variables('publicSubnetPrefix')]\"}, \"name\": \"[variables('publicSubnetName')]\"}], \"addressSpace\": {\"addressPrefixes\": [\"[variables('addressPrefix')]\"]}}, \"type\": \"Microsoft.Network/virtualNetworks\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"name\": \"[variables('virtualNetworkName')]\"}, {\"properties\": {\"dnsSettings\": {\"domainNameLabel\": \"[concat('slavepublic', copyindex(), '-', variables('uniqueName'))]\"}, \"publicIPAllocationMethod\": \"Dynamic\"}, \"type\": \"Microsoft.Network/publicIPAddresses\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[parameters('numberOfPublicSlaves')]\", \"name\": \"ipLoop\"}, \"name\": \"[concat('slavePublicIP', copyindex())]\"}, {\"properties\": {\"networkSecurityGroup\": {\"id\": \"[resourceId('Microsoft.Network/networkSecurityGroups', variables('slavePublicSecurityGroupName'))]\"}, \"ipConfigurations\": [{\"properties\": {\"publicIPAddress\": {\"id\": \"[resourceId('Microsoft.Network/publicIpAddresses', concat('slavePublicIP', copyindex()))]\"}, \"subnet\": {\"id\": \"[variables('publicSubnetRef')]\"}, \"privateIPAllocationMethod\": \"Dynamic\"}, \"name\": \"ipconfig1\"}]}, \"dependsOn\": [\"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]\", \"[concat('Microsoft.Network/networkSecurityGroups/', variables('slavePublicSecurityGroupName'))]\"], \"type\": \"Microsoft.Network/networkInterfaces\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[parameters('numberOfPublicSlaves')]\", \"name\": \"slavePublicNicLoop\"}, \"name\": \"[concat('slavePublicNic', copyindex())]\"}, {\"properties\": {\"networkProfile\": {\"networkInterfaces\": [{\"id\": \"[resourceId('Microsoft.Network/networkInterfaces',concat('slavePublicNic', copyindex()))]\"}]}, \"hardwareProfile\": {\"vmSize\": \"[variables('vmSize')]\"}, \"storageProfile\": {\"imageReference\": {\"version\": \"[variables('coreosVersion')]\", \"publisher\": \"CoreOS\", \"sku\": \"stable\", \"offer\": \"CoreOS\"}, \"osDisk\": {\"caching\": \"ReadWrite\", \"vhd\": {\"uri\": \"[concat('http://',concat(variables('storageAccountPrefix')[mod(mod(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('storageAccountPrefix')[mod(div(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('uniqueName')),'.blob.core.windows.net/vhds/slavePublicVhd',copyIndex(),'.vhd')]\"}, \"createOption\": \"FromImage\", \"name\": \"[concat('slavePublicVhd', copyindex())]\"}}, \"osProfile\": {\"adminUsername\": \"[variables('adminUsername')]\", \"customData\": \"[base64(concat('#cloud-config\\n\\n', '{\\\"coreos\\\": {\\\"units\\\": [{\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Mount /var/lib\\\\nBefore=dbus.service\\\\n[Mount]\\\\nWhat=/dev/sdb1\\\\nWhere=/var/lib\\\\nType=ext4\\\\n\\\", \\\"name\\\": \\\"var-lib.mount\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Write out dynamic config values\\\\n[Service]\\\\nType=oneshot\\\\nEnvironmentFile=/etc/environment\\\\n# Marathon depends on `hostname` resolution working\\\\nExecStart=/usr/bin/bash -c \\\\\\\"echo $private_ipv4 $(hostname) > /etc/hosts\\\\\\\"\\\", \\\"name\\\": \\\"config-writer.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"etcd.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"update-engine.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"locksmithd.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"name\\\": \\\"systemd-resolved.service\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nBefore=dcos.target\\\\n[Service]\\\\nType=oneshot\\\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\\\n\\\", \\\"name\\\": \\\"dcos-link-env.service\\\"}, {\\\"content\\\": \\\"[Unit]\\\\nDescription=Download the DCOS\\\\nAfter=network-online.target\\\\nWants=network-online.target\\\\nConditionPathExists=!/opt/mesosphere/\\\\n[Service]\\\\nEnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\\\nType=oneshot\\\\nExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\\\nExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\\\nExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\\\n\\\", \\\"name\\\": \\\"dcos-download.service\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Prep the Pkgpanda working directories for this host.\\\\nRequires=dcos-download.service\\\\nAfter=dcos-download.service\\\\n[Service]\\\\nType=oneshot\\\\nEnvironmentFile=/opt/mesosphere/environment\\\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\\\n[Install]\\\\nWantedBy=multi-user.target\\\", \\\"enable\\\": true, \\\"name\\\": \\\"dcos-setup.service\\\"}], \\\"update\\\": {\\\"reboot-strategy\\\": \\\"off\\\"}}, \\\"write_files\\\": [{\\\"content\\\": \\\"{\\\\n  \\\\\\\"environment\\\\\\\": {\\\\n    \\\\\\\"PROVIDER\\\\\\\": \\\\\\\"azure\\\\\\\"\\\\n  }\\\\n}\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\\\"}, {\\\"content\\\": \\\"# TODO(cmaloney): Add cluster general info for analytics here\\\\nZOOKEEPER_CLUSTER_SIZE=1\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/cloudenv\\\"}, {\\\"content\\\": \\\"MESOS_CLUSTER=', variables('uniqueName'),'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\\\"}, {\\\"content\\\": \\\"EXHIBITOR_BACKEND=AZURE\\\\nAZURE_CONTAINER=dcos-exhibitor\\\\nAZURE_PREFIX=', variables('uniqueName'),'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\\\"}, {\\\"content\\\": \\\"com.netflix.exhibitor.azure.account-name=', variables('storageAccountName'),'\\\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\\\"}, {\\\"content\\\": \\\"MASTER_SOURCE=exhibitor\\\\n# TODO(cmaloney): Switch to VRRP or an internal master load balancer\\\\nEXHIBITOR_ADDRESS=', reference('masterNodeNic0').ipConfigurations[0].properties.privateIPAddress,'\\\\nRESOLVERS=168.63.129.16\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/dns_config\\\"}, {\\\"content\\\": \\\"/url\\\\n\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/repository-url\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"BOOTSTRAP_ID=12345\\\\n\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/bootstrap-id\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"[\\\\\\\"dcos-config--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\", \\\\\\\"dcos-detect-ip--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\", \\\\\\\"dcos-metadata--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\"]\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/cluster-packages.json\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"\\\", \\\"path\\\": \\\"/etc/mesosphere/roles/slave_public\\\"}, {\\\"content\\\": \\\"\\\", \\\"path\\\": \\\"/etc/mesosphere/roles/azure\\\"}]}'))]\", \"linuxConfiguration\": {\"disablePasswordAuthentication\": \"true\", \"ssh\": {\"publicKeys\": [{\"keyData\": \"[parameters('sshKeyData')]\", \"path\": \"[variables('sshKeyPath')]\"}]}}, \"computername\": \"[concat('slavepublic', copyIndex())]\"}}, \"dependsOn\": [\"[concat('Microsoft.Network/networkInterfaces/', 'slavePublicNic', copyindex())]\", \"[concat('Microsoft.Storage/storageAccounts/',concat(variables('storageAccountPrefix')[mod(mod(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('storageAccountPrefix')[mod(div(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('uniquename')))]\"], \"type\": \"Microsoft.Compute/virtualMachines\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[parameters('numberOfPublicSlaves')]\", \"name\": \"slavePublicVMLoop\"}, \"name\": \"[concat('slavePublic', copyindex())]\"}, {\"properties\": {\"networksecuritygroup\": {\"id\": \"[resourceid('microsoft.network/networkSecurityGroups', variables('slavePrivateSecurityGroupName'))]\"}, \"ipconfigurations\": [{\"properties\": {\"privateipallocationmethod\": \"dynamic\", \"subnet\": {\"id\": \"[variables('privatesubnetref')]\"}}, \"name\": \"ipconfig1\"}]}, \"dependsOn\": [\"[concat('microsoft.network/virtualNetworks/', variables('virtualnetworkname'))]\", \"[concat('microsoft.network/networkSecurityGroups/', variables('slavePrivateSecurityGroupName'))]\"], \"type\": \"microsoft.network/networkInterfaces\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[parameters('numberOfPrivateSlaves')]\", \"name\": \"slaveprivatenicloop\"}, \"name\": \"[concat('slaveprivatenic', copyindex())]\"}, {\"properties\": {\"networkProfile\": {\"networkInterfaces\": [{\"id\": \"[resourceId('Microsoft.Network/networkInterfaces',concat('slavePrivateNic', copyindex()))]\"}]}, \"hardwareProfile\": {\"vmSize\": \"[variables('vmSize')]\"}, \"storageProfile\": {\"imageReference\": {\"version\": \"[variables('coreosVersion')]\", \"publisher\": \"CoreOS\", \"sku\": \"stable\", \"offer\": \"CoreOS\"}, \"osDisk\": {\"caching\": \"ReadWrite\", \"vhd\": {\"uri\": \"[concat('http://',concat(variables('storageAccountPrefix')[mod(mod(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('storageAccountPrefix')[mod(div(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('uniquename')),'.blob.core.windows.net/vhds/','slavePrivateVhd',copyIndex(),'.vhd')]\"}, \"createOption\": \"FromImage\", \"name\": \"[concat('slavePrivateVhd', copyindex())]\"}}, \"osProfile\": {\"adminUsername\": \"[variables('adminUsername')]\", \"customData\": \"[base64(concat('#cloud-config\\n\\n', '{\\\"coreos\\\": {\\\"units\\\": [{\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Mount /var/lib\\\\nBefore=dbus.service\\\\n[Mount]\\\\nWhat=/dev/sdb1\\\\nWhere=/var/lib\\\\nType=ext4\\\\n\\\", \\\"name\\\": \\\"var-lib.mount\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Write out dynamic config values\\\\n[Service]\\\\nType=oneshot\\\\nEnvironmentFile=/etc/environment\\\\n# Marathon depends on `hostname` resolution working\\\\nExecStart=/usr/bin/bash -c \\\\\\\"echo $private_ipv4 $(hostname) > /etc/hosts\\\\\\\"\\\", \\\"name\\\": \\\"config-writer.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"etcd.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"update-engine.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"locksmithd.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"name\\\": \\\"systemd-resolved.service\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nBefore=dcos.target\\\\n[Service]\\\\nType=oneshot\\\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\\\n\\\", \\\"name\\\": \\\"dcos-link-env.service\\\"}, {\\\"content\\\": \\\"[Unit]\\\\nDescription=Download the DCOS\\\\nAfter=network-online.target\\\\nWants=network-online.target\\\\nConditionPathExists=!/opt/mesosphere/\\\\n[Service]\\\\nEnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\\\nType=oneshot\\\\nExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\\\nExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\\\nExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\\\n\\\", \\\"name\\\": \\\"dcos-download.service\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Prep the Pkgpanda working directories for this host.\\\\nRequires=dcos-download.service\\\\nAfter=dcos-download.service\\\\n[Service]\\\\nType=oneshot\\\\nEnvironmentFile=/opt/mesosphere/environment\\\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\\\n[Install]\\\\nWantedBy=multi-user.target\\\", \\\"enable\\\": true, \\\"name\\\": \\\"dcos-setup.service\\\"}], \\\"update\\\": {\\\"reboot-strategy\\\": \\\"off\\\"}}, \\\"write_files\\\": [{\\\"content\\\": \\\"{\\\\n  \\\\\\\"environment\\\\\\\": {\\\\n    \\\\\\\"PROVIDER\\\\\\\": \\\\\\\"azure\\\\\\\"\\\\n  }\\\\n}\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\\\"}, {\\\"content\\\": \\\"# TODO(cmaloney): Add cluster general info for analytics here\\\\nZOOKEEPER_CLUSTER_SIZE=1\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/cloudenv\\\"}, {\\\"content\\\": \\\"MESOS_CLUSTER=', variables('uniqueName'),'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\\\"}, {\\\"content\\\": \\\"EXHIBITOR_BACKEND=AZURE\\\\nAZURE_CONTAINER=dcos-exhibitor\\\\nAZURE_PREFIX=', variables('uniqueName'),'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\\\"}, {\\\"content\\\": \\\"com.netflix.exhibitor.azure.account-name=', variables('storageAccountName'),'\\\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\\\"}, {\\\"content\\\": \\\"MASTER_SOURCE=exhibitor\\\\n# TODO(cmaloney): Switch to VRRP or an internal master load balancer\\\\nEXHIBITOR_ADDRESS=', reference('masterNodeNic0').ipConfigurations[0].properties.privateIPAddress,'\\\\nRESOLVERS=168.63.129.16\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/dns_config\\\"}, {\\\"content\\\": \\\"/url\\\\n\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/repository-url\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"BOOTSTRAP_ID=12345\\\\n\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/bootstrap-id\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"[\\\\\\\"dcos-config--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\", \\\\\\\"dcos-detect-ip--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\", \\\\\\\"dcos-metadata--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\"]\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/cluster-packages.json\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"\\\", \\\"path\\\": \\\"/etc/mesosphere/roles/slave\\\"}, {\\\"content\\\": \\\"\\\", \\\"path\\\": \\\"/etc/mesosphere/roles/azure\\\"}]}'))]\", \"linuxConfiguration\": {\"disablePasswordAuthentication\": \"true\", \"ssh\": {\"publicKeys\": [{\"keyData\": \"[parameters('sshKeyData')]\", \"path\": \"[variables('sshKeyPath')]\"}]}}, \"computername\": \"[concat('slaveprivate', copyIndex())]\"}}, \"dependsOn\": [\"[concat('microsoft.network/networkInterfaces/', 'slavePrivateNic', copyindex())]\", \"[concat('Microsoft.Storage/storageAccounts/',concat(variables('storageAccountPrefix')[mod(mod(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('storageAccountPrefix')[mod(div(copyIndex(),variables('storageAccountPrefixCount')),variables('storageAccountsCount'))],variables('uniquename')))]\"], \"type\": \"Microsoft.Compute/virtualMachines\", \"location\": \"[parameters('region')]\", \"apiversion\": \"2015-06-15\", \"copy\": {\"count\": \"[parameters('numberOfPrivateSlaves')]\", \"name\": \"slavePrivateVMLoop\"}, \"name\": \"[concat('slavePrivate', copyindex())]\"}, {\"properties\": {\"dnsSettings\": {\"domainNameLabel\": \"[concat('master', copyindex(), '-', variables('uniqueName'))]\"}, \"publicIPAllocationMethod\": \"Dynamic\"}, \"type\": \"Microsoft.Network/publicIPAddresses\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[parameters('numberOfMasters')]\", \"name\": \"ipLoop\"}, \"name\": \"[concat('masterPublicIP', copyindex())]\"}, {\"properties\": {\"networkSecurityGroup\": {\"id\": \"[resourceId('Microsoft.Network/networkSecurityGroups', variables('masterSecurityGroupName'))]\"}, \"ipConfigurations\": [{\"properties\": {\"publicIPAddress\": {\"id\": \"[resourceId('Microsoft.Network/publicIpAddresses', concat('masterPublicIP', copyindex()))]\"}, \"loadBalancerBackendAddressPools\": [{\"id\": \"[concat(variables('internalMasterLoadBalancerID'), '/backendAddressPools/BackendPool1')]\"}], \"subnet\": {\"id\": \"[variables('publicSubnetRef')]\"}, \"privateIPAllocationMethod\": \"Dynamic\"}, \"name\": \"ipconfig1\"}]}, \"dependsOn\": [\"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]\", \"[concat('Microsoft.Network/publicIPAddresses/', 'masterPublicIP', copyindex())]\", \"[concat('Microsoft.Network/loadBalancers/', variables('internalMasterLoadBalancerName'))]\", \"[concat('Microsoft.Network/networkSecurityGroups/', variables('masterSecurityGroupName'))]\"], \"type\": \"Microsoft.Network/networkInterfaces\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[parameters('numberOfMasters')]\", \"name\": \"masterNicLoop\"}, \"name\": \"[concat('masterNodeNic', copyindex())]\"}, {\"properties\": {\"networkProfile\": {\"networkInterfaces\": [{\"id\": \"[resourceId('Microsoft.Network/networkInterfaces',concat('masterNodeNic', copyindex()))]\"}]}, \"hardwareProfile\": {\"vmSize\": \"[variables('vmSize')]\"}, \"availabilitySet\": {\"id\": \"[resourceId('Microsoft.Compute/availabilitySets', 'masters')]\"}, \"storageProfile\": {\"imageReference\": {\"version\": \"[variables('coreosVersion')]\", \"publisher\": \"CoreOS\", \"sku\": \"stable\", \"offer\": \"CoreOS\"}, \"osDisk\": {\"caching\": \"ReadWrite\", \"vhd\": {\"uri\": \"[concat('http://',variables('storageAccountName'),'.blob.core.windows.net/vhds/','masterNodeVhd', copyindex(),'.vhd')]\"}, \"createOption\": \"FromImage\", \"name\": \"[concat('masterNodeVhd', copyindex())]\"}}, \"osProfile\": {\"adminUsername\": \"[variables('adminUsername')]\", \"customData\": \"[base64(concat('#cloud-config\\n\\n', '{\\\"coreos\\\": {\\\"units\\\": [{\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Mount /var/lib\\\\nBefore=dbus.service\\\\n[Mount]\\\\nWhat=/dev/sdb1\\\\nWhere=/var/lib\\\\nType=ext4\\\\n\\\", \\\"name\\\": \\\"var-lib.mount\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Write out dynamic config values\\\\n[Service]\\\\nType=oneshot\\\\nEnvironmentFile=/etc/environment\\\\n# Marathon depends on `hostname` resolution working\\\\nExecStart=/usr/bin/bash -c \\\\\\\"echo $private_ipv4 $(hostname) > /etc/hosts\\\\\\\"\\\", \\\"name\\\": \\\"config-writer.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"etcd.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"update-engine.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"mask\\\": true, \\\"name\\\": \\\"locksmithd.service\\\"}, {\\\"command\\\": \\\"stop\\\", \\\"name\\\": \\\"systemd-resolved.service\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nBefore=dcos.target\\\\n[Service]\\\\nType=oneshot\\\\nExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\\\nExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\\\n\\\", \\\"name\\\": \\\"dcos-link-env.service\\\"}, {\\\"content\\\": \\\"[Unit]\\\\nDescription=Download the DCOS\\\\nAfter=network-online.target\\\\nWants=network-online.target\\\\nConditionPathExists=!/opt/mesosphere/\\\\n[Service]\\\\nEnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\\\nType=oneshot\\\\nExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\\\nExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\\\nExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\\\nExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\\\n\\\", \\\"name\\\": \\\"dcos-download.service\\\"}, {\\\"command\\\": \\\"start\\\", \\\"content\\\": \\\"[Unit]\\\\nDescription=Prep the Pkgpanda working directories for this host.\\\\nRequires=dcos-download.service\\\\nAfter=dcos-download.service\\\\n[Service]\\\\nType=oneshot\\\\nEnvironmentFile=/opt/mesosphere/environment\\\\nExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\\\n[Install]\\\\nWantedBy=multi-user.target\\\", \\\"enable\\\": true, \\\"name\\\": \\\"dcos-setup.service\\\"}], \\\"update\\\": {\\\"reboot-strategy\\\": \\\"off\\\"}}, \\\"write_files\\\": [{\\\"content\\\": \\\"{\\\\n  \\\\\\\"environment\\\\\\\": {\\\\n    \\\\\\\"PROVIDER\\\\\\\": \\\\\\\"azure\\\\\\\"\\\\n  }\\\\n}\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\\\"}, {\\\"content\\\": \\\"# TODO(cmaloney): Add cluster general info for analytics here\\\\nZOOKEEPER_CLUSTER_SIZE=1\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/cloudenv\\\"}, {\\\"content\\\": \\\"MESOS_CLUSTER=', variables('uniqueName'),'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\\\"}, {\\\"content\\\": \\\"EXHIBITOR_BACKEND=AZURE\\\\nAZURE_CONTAINER=dcos-exhibitor\\\\nAZURE_PREFIX=', variables('uniqueName'),'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\\\"}, {\\\"content\\\": \\\"com.netflix.exhibitor.azure.account-name=', variables('storageAccountName'),'\\\\ncom.netflix.exhibitor.azure.account-key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2015-05-01-preview').key1,'\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\\\"}, {\\\"content\\\": \\\"MASTER_SOURCE=exhibitor\\\\n# TODO(cmaloney): Switch to VRRP or an internal master load balancer\\\\nEXHIBITOR_ADDRESS=', reference('masterNodeNic0').ipConfigurations[0].properties.privateIPAddress,'\\\\nRESOLVERS=168.63.129.16\\\\n\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/dns_config\\\"}, {\\\"content\\\": \\\"/url\\\\n\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/repository-url\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"BOOTSTRAP_ID=12345\\\\n\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/bootstrap-id\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"[\\\\\\\"dcos-config--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\", \\\\\\\"dcos-detect-ip--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\", \\\\\\\"dcos-metadata--setup_04b0ac5ac3d6165ed220d8afdd7240f6d10ef00b\\\\\\\"]\\\", \\\"owner\\\": \\\"root\\\", \\\"path\\\": \\\"/etc/mesosphere/setup-flags/cluster-packages.json\\\", \\\"permissions\\\": 420}, {\\\"content\\\": \\\"\\\", \\\"path\\\": \\\"/etc/mesosphere/roles/master\\\"}, {\\\"content\\\": \\\"\\\", \\\"path\\\": \\\"/etc/mesosphere/roles/azure_master\\\"}, {\\\"content\\\": \\\"\\\", \\\"path\\\": \\\"/etc/mesosphere/roles/azure\\\"}]}'))]\", \"linuxConfiguration\": {\"disablePasswordAuthentication\": \"true\", \"ssh\": {\"publicKeys\": [{\"keyData\": \"[parameters('sshKeyData')]\", \"path\": \"[variables('sshKeyPath')]\"}]}}, \"computername\": \"[concat('master', copyIndex())]\"}}, \"dependsOn\": [\"[concat('Microsoft.Network/networkInterfaces/', 'masterNodeNic', copyindex())]\", \"[concat('Microsoft.Compute/availabilitySets/', 'masters')]\", \"[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]\"], \"type\": \"Microsoft.Compute/virtualMachines\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"copy\": {\"count\": \"[parameters('numberOfMasters')]\", \"name\": \"masterVmLoop\"}, \"name\": \"[concat('master', copyindex())]\"}, {\"properties\": {\"frontendIpConfigurations\": [{\"properties\": {\"subnet\": {\"Id\": \"[variables('publicSubnetRef')]\"}, \"privateIPAllocationMethod\": \"Dynamic\"}, \"name\": \"LoadBalancerFrontend\"}], \"probes\": [{\"properties\": {\"port\": 8181, \"protocol\": \"Tcp\", \"numberOfProbes\": 2, \"intervalInSeconds\": 15}, \"name\": \"exhibitor\"}], \"backendAddressPools\": [{\"name\": \"BackendPool1\"}], \"loadBalancingRules\": [{\"properties\": {\"idleTimeoutInMinutes\": 15, \"protocol\": \"Tcp\", \"probe\": {\"Id\": \"[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalMasterLoadBalancerName')), '/probes/exhibitor')]\"}, \"frontendIPConfiguration\": {\"Id\": \"[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalMasterLoadBalancerName')), '/frontendIpConfigurations/LoadBalancerFrontend')]\"}, \"frontendPort\": 8181, \"backendAddressPool\": {\"Id\": \"[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalMasterLoadBalancerName')), '/backendAddressPools/BackendPool1')]\"}, \"backendPort\": 8181}, \"Name\": \"exhibitor\"}]}, \"dependsOn\": [\"[variables('vnetID')]\"], \"type\": \"Microsoft.Network/loadBalancers\", \"apiVersion\": \"2015-06-15\", \"location\": \"[parameters('region')]\", \"name\": \"[variables('internalMasterLoadBalancerName')]\"}], \"variables\": {\"adminUsername\": \"core\", \"virtualNetworkName\": \"[concat(variables('uniqueName'), 'dcvn')]\", \"vnetID\": \"[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]\", \"publicSubnetRef\": \"[concat(variables('vnetID'),'/subnets/',variables('publicSubnetName'))]\", \"storageAccountsCount\": \"[add(div(add(parameters('numberOfPrivateSlaves'),parameters('numberOfPublicSlaves')),parameters('vmsPerStorageAccount')),mod(add(mod(add(parameters('numberOfPrivateSlaves'),parameters('numberOfPublicSlaves')), parameters('vmsPerStorageAccount')),2), add(mod(add(parameters('numberOfPrivateSlaves'),parameters('numberOfPublicSlaves')), parameters('vmsPerStorageAccount')),1)))]\", \"TemplateGenerationDate\": \"2015-10-23 16:51:16.800462\", \"storageAccountType\": \"Standard_LRS\", \"storageAccountPrefix\": [\"0\", \"6\", \"c\", \"i\", \"o\", \"u\", \"1\", \"7\", \"d\", \"j\", \"p\", \"v\", \"2\", \"8\", \"e\", \"k\", \"q\", \"w\", \"3\", \"9\", \"f\", \"l\", \"r\", \"x\", \"4\", \"a\", \"g\", \"m\", \"s\", \"y\", \"5\", \"b\", \"h\", \"n\", \"t\", \"z\"], \"storageAccountName\": \"[concat(variables('uniqueName'), 'dcsan')]\", \"DcosImageCommit\": \"cdcdf04880a2e72540c2b609aa695efacdab4602\", \"privateSubnetPrefix\": \"10.0.0.0/22\", \"uniqueName\": \"[resourceGroup().name]\", \"publicSubnetName\": \"PublicSubnet\", \"slavePrivateSecurityGroupName\": \"[concat(variables('uniqueName'), 'sprisg')]\", \"publicSubnetPrefix\": \"10.0.4.0/22\", \"addressPrefix\": \"10.0.0.0/16\", \"masterSecurityGroupName\": \"[concat(variables('uniqueName'), 'mstrsg')]\", \"internalMasterLoadBalancerName\": \"internalMasterLoadBalancer\", \"internalMasterLoadBalancerID\": \"[resourceId('Microsoft.Network/loadBalancers',variables('internalMasterLoadBalancerName'))]\", \"slavePublicSecurityGroupName\": \"[concat(variables('uniqueName'), 'spubsg')]\", \"vmSize\": \"Standard_A5\", \"storageAccountPrefixCount\": \"[length(variables('storageAccountPrefix'))]\", \"privateSubnetName\": \"PrivateSubnet\", \"coreosVersion\": \"766.4.0\", \"sshKeyPath\": \"[concat('/home/',variables('adminUsername'),'/.ssh/authorized_keys')]\", \"privateSubnetRef\": \"[concat(variables('vnetID'),'/subnets/',variables('privateSubnetName'))]\"}, \"metadata\": {\"eula\": \"http://docs.mesosphere.com/community-edition-eula/\"}}"}, {"known_path": "azure.html", "upload_args": {"ContentType": "text/html; charset=utf-8"}, "content": "<!doctype html>\n<html>\n<head>\n  <title>DCOS channel channel ARM Template</title>\n</head>\n<body>\n<h1>DCOS channel channel ARM Template</h1>\n\n<a href='https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fs3.amazonaws.com%2Fdownloads.mesosphere.io%2Fdcos%2Fchannel%2Fazure%2Fsingle-master.azuredeploy.json' target=\"_blank\">\n  <img src=\"http://azuredeploy.net/deploybutton.png\"/>\n</a>\n\n<footer>\n<pre>\nDCOS Release: tag\nDCOS Commit: None\n</pre>\n</footer>\n</body>\n</html>"}]}, "aws": {"extra_packages": ["dcos-detect-ip--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3", "dcos-metadata--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3", "dcos-config--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3", "dcos-detect-ip--setup_dce5364138047245b0729fb1430b948c039e3977", "dcos-metadata--setup_dce5364138047245b0729fb1430b948c039e3977", "dcos-config--setup_dce5364138047245b0729fb1430b948c039e3977", "dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575", "dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575", "dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575", "dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575", "dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575", "dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575"], "files": [{"known_path": "cloudformation/single-master.cloudformation.json", "stable_path": "cloudformation/dce5364138047245b0729fb1430b948c039e3977.single-master.cloudformation.json", "content": "{\"Mappings\": {\"RegionToAmi\": {\"us-west-2\": {\"stable\": \"ami-ed8b90dd\"}, \"eu-west-1\": {\"stable\": \"ami-eb97bc9c\"}, \"us-west-1\": {\"stable\": \"ami-2b29ee6f\"}, \"us-gov-west-1\": {\"stable\": \"ami-796a085a\"}, \"eu-central-1\": {\"stable\": \"ami-840a0899\"}, \"sa-east-1\": {\"stable\": \"ami-3396012e\"}, \"ap-southeast-1\": {\"stable\": \"ami-46819614\"}, \"us-east-1\": {\"stable\": \"ami-05783d60\"}, \"ap-southeast-2\": {\"stable\": \"ami-f5ace5cf\"}, \"ap-northeast-1\": {\"stable\": \"ami-6c5ac56c\"}}, \"NATAmi\": {\"us-west-2\": {\"default\": \"ami-bb69128b\"}, \"eu-west-1\": {\"default\": \"ami-3760b040\"}, \"us-west-1\": {\"default\": \"ami-2b2b296e\"}, \"eu-central-1\": {\"default\": \"ami-204c7a3d\"}, \"sa-east-1\": {\"default\": \"ami-b972dba4\"}, \"ap-southeast-1\": {\"default\": \"ami-b082dae2\"}, \"us-east-1\": {\"default\": \"ami-4c9e4b24\"}, \"ap-southeast-2\": {\"default\": \"ami-996402a3\"}, \"ap-northeast-1\": {\"default\": \"ami-55c29e54\"}}, \"Parameters\": {\"PublicSlaveInstanceType\": {\"default\": \"m3.xlarge\"}, \"PrivateSubnetRange\": {\"default\": \"10.0.0.0/22\"}, \"VPCSubnetRange\": {\"default\": \"10.0.0.0/16\"}, \"PublicSubnetRange\": {\"default\": \"10.0.4.0/22\"}, \"MasterInstanceType\": {\"default\": \"m3.xlarge\"}, \"StackCreationTimeout\": {\"default\": \"PT30M\"}, \"SlaveInstanceType\": {\"default\": \"m3.xlarge\"}}}, \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"Launching the Mesosphere DCOS cluster\", \"Conditions\": {\"RegionIsUsEast1\": {\"Fn::Equals\": [{\"Ref\": \"AWS::Region\"}, \"us-east-1\"]}}, \"Outputs\": {\"PublicSlaveDnsAddress\": {\"Description\": \"Public slaves\", \"Value\": {\"Fn::GetAtt\": [\"PublicSlaveLoadBalancer\", \"DNSName\"]}}, \"DnsAddress\": {\"Description\": \"Mesos Master\", \"Value\": {\"Fn::GetAtt\": [\"ElasticLoadBalancer\", \"DNSName\"]}}}, \"Metadata\": {\"DcosImageCommit\": \"cdcdf04880a2e72540c2b609aa695efacdab4602\", \"TemplateGenerationDate\": \"2015-10-23 16:51:16.800462\"}, \"Parameters\": {\"AcceptEULA\": {\"AllowedValues\": [\"Yes\"], \"Description\": \"Please read and agree to our EULA: https://docs.mesosphere.com/community-edition-eula/\", \"Type\": \"String\"}, \"PublicSlaveInstanceCount\": {\"Description\": \"Number of public slave nodes to launch\", \"Default\": \"1\", \"Type\": \"Number\"}, \"KeyName\": {\"Description\": \"Name of SSH key to link\", \"Type\": \"AWS::EC2::KeyPair::KeyName\"}, \"SlaveInstanceCount\": {\"Description\": \"Number of slave nodes to launch\", \"Default\": \"5\", \"Type\": \"Number\"}, \"AdminLocation\": {\"AllowedPattern\": \"^([0-9]+\\\\.){3}[0-9]+\\\\/[0-9]+$\", \"MaxLength\": \"18\", \"Description\": \"The IP range to whitelist for admin access.\", \"MinLength\": \"9\", \"Type\": \"String\", \"ConstraintDescription\": \"must be a valid CIDR.\", \"Default\": \"0.0.0.0/0\"}}, \"Resources\": {\"MasterToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InternalMasterLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}, {\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"PublicSlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"5050\", \"LoadBalancerPort\": \"5050\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"2181\", \"LoadBalancerPort\": \"2181\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8181\", \"LoadBalancerPort\": \"8181\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8080\", \"LoadBalancerPort\": \"8080\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}], \"Scheme\": \"internal\"}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"PrivateSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"ElasticLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"SlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"Vpc\": {\"Properties\": {\"EnableDnsHostnames\": \"true\", \"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"VPCSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"EnableDnsSupport\": \"true\"}, \"Type\": \"AWS::EC2::VPC\"}, \"MasterInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"MasterRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"PublicSlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressThree\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"tcp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"DHCPOptions\": {\"Properties\": {\"DomainName\": {\"Fn::If\": [\"RegionIsUsEast1\", \"ec2.internal\", {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::Region\"}, \".compute.internal\"]]}]}, \"DomainNameServers\": [\"AmazonProvidedDNS\"]}, \"Type\": \"AWS::EC2::DHCPOptions\"}, \"SlaveInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"SlaveRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"SlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"SlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"SlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PrivateSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PrivateSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"SlaveInstanceCount\"}}}}, \"PrivateRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"MasterToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressOne\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"tcp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"AdminSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Enable admin access to servers\", \"SecurityGroupIngress\": [{\"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"CidrIp\": {\"Ref\": \"AdminLocation\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"PublicSlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"LoadBalancerNames\": [{\"Ref\": \"PublicSlaveLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"PublicSlaveInstanceCount\"}}}}, \"SlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"PublicSlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_dce5364138047245b0729fb1430b948c039e3977\\\", \\\"dcos-detect-ip--setup_dce5364138047245b0729fb1430b948c039e3977\\\", \\\"dcos-metadata--setup_dce5364138047245b0729fb1430b948c039e3977\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave_public\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveIngressFive\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"udp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"HostKeys\": {\"Properties\": {\"UserName\": {\"Ref\": \"IAMUser\"}}, \"Type\": \"AWS::IAM::AccessKey\"}, \"MasterToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"LbSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Master LB\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveIngressSix\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"udp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"MasterLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"MasterInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_dce5364138047245b0729fb1430b948c039e3977\\\", \\\"dcos-detect-ip--setup_dce5364138047245b0729fb1430b948c039e3977\\\", \\\"dcos-metadata--setup_dce5364138047245b0729fb1430b948c039e3977\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws_master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"MasterInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves Public\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"OutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"ExhibitorS3Bucket\": {\"Type\": \"AWS::S3::Bucket\", \"DeletionPolicy\": \"Retain\"}, \"PrivateSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicSlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressFour\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"udp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveRole\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"Slaves\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:80/\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"VPCDHCPOptionsAssociation\": {\"Properties\": {\"DhcpOptionsId\": {\"Ref\": \"DHCPOptions\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCDHCPOptionsAssociation\"}, \"PublicSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"PrivateOutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PublicSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"PrivateSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PrivateSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Private\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateInboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PrivateRoute\": {\"Properties\": {\"InstanceId\": {\"Ref\": \"NATInstance\"}, \"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}}, \"Type\": \"AWS::EC2::Route\"}, \"MasterRole\": {\"Properties\": {\"Path\": \"/\", \"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveToMasterLBIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"GroupId\": {\"Ref\": \"LbSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"IAMUser\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}]}, \"Type\": \"AWS::IAM::User\"}, \"MasterSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Masters\", \"SecurityGroupIngress\": [{\"FromPort\": \"5050\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"80\", \"IpProtocol\": \"tcp\", \"ToPort\": \"80\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8080\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8080\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"NATInstance\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"ImageId\": {\"Fn::FindInMap\": [\"NATAmi\", {\"Ref\": \"AWS::Region\"}, \"default\"]}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"InstanceType\": \"m3.medium\", \"SourceDestCheck\": \"false\", \"NetworkInterfaces\": [{\"GroupSet\": [{\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"AssociatePublicIpAddress\": \"true\", \"DeleteOnTermination\": \"true\", \"SubnetId\": {\"Ref\": \"PublicSubnet\"}, \"DeviceIndex\": \"0\"}]}, \"Type\": \"AWS::EC2::Instance\"}, \"PublicSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveIngressTwo\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"MasterServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"MasterLaunchConfig\"}, \"MaxSize\": 1, \"MinSize\": 1, \"DesiredCapacity\": 1, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-master\"}], \"LoadBalancerNames\": [{\"Ref\": \"ElasticLoadBalancer\"}, {\"Ref\": \"InternalMasterLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": 1}}}, \"InternetGateway\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}]}, \"Type\": \"AWS::EC2::InternetGateway\"}, \"GatewayToInternet\": {\"Properties\": {\"InternetGatewayId\": {\"Ref\": \"InternetGateway\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCGatewayAttachment\"}, \"SlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"SlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"false\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"SlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_dce5364138047245b0729fb1430b948c039e3977\\\", \\\"dcos-detect-ip--setup_dce5364138047245b0729fb1430b948c039e3977\\\", \\\"dcos-metadata--setup_dce5364138047245b0729fb1430b948c039e3977\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicRoute\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"GatewayId\": {\"Ref\": \"InternetGateway\"}}, \"Type\": \"AWS::EC2::Route\"}}}"}, {"known_path": "cloudformation/multi-master.cloudformation.json", "stable_path": "cloudformation/d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3.multi-master.cloudformation.json", "content": "{\"Mappings\": {\"RegionToAmi\": {\"us-west-2\": {\"stable\": \"ami-ed8b90dd\"}, \"eu-west-1\": {\"stable\": \"ami-eb97bc9c\"}, \"us-west-1\": {\"stable\": \"ami-2b29ee6f\"}, \"us-gov-west-1\": {\"stable\": \"ami-796a085a\"}, \"eu-central-1\": {\"stable\": \"ami-840a0899\"}, \"sa-east-1\": {\"stable\": \"ami-3396012e\"}, \"ap-southeast-1\": {\"stable\": \"ami-46819614\"}, \"us-east-1\": {\"stable\": \"ami-05783d60\"}, \"ap-southeast-2\": {\"stable\": \"ami-f5ace5cf\"}, \"ap-northeast-1\": {\"stable\": \"ami-6c5ac56c\"}}, \"NATAmi\": {\"us-west-2\": {\"default\": \"ami-bb69128b\"}, \"eu-west-1\": {\"default\": \"ami-3760b040\"}, \"us-west-1\": {\"default\": \"ami-2b2b296e\"}, \"eu-central-1\": {\"default\": \"ami-204c7a3d\"}, \"sa-east-1\": {\"default\": \"ami-b972dba4\"}, \"ap-southeast-1\": {\"default\": \"ami-b082dae2\"}, \"us-east-1\": {\"default\": \"ami-4c9e4b24\"}, \"ap-southeast-2\": {\"default\": \"ami-996402a3\"}, \"ap-northeast-1\": {\"default\": \"ami-55c29e54\"}}, \"Parameters\": {\"PublicSlaveInstanceType\": {\"default\": \"m3.xlarge\"}, \"PrivateSubnetRange\": {\"default\": \"10.0.0.0/22\"}, \"VPCSubnetRange\": {\"default\": \"10.0.0.0/16\"}, \"PublicSubnetRange\": {\"default\": \"10.0.4.0/22\"}, \"MasterInstanceType\": {\"default\": \"m3.xlarge\"}, \"StackCreationTimeout\": {\"default\": \"PT30M\"}, \"SlaveInstanceType\": {\"default\": \"m3.xlarge\"}}}, \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"Launching the Mesosphere DCOS cluster\", \"Conditions\": {\"RegionIsUsEast1\": {\"Fn::Equals\": [{\"Ref\": \"AWS::Region\"}, \"us-east-1\"]}}, \"Outputs\": {\"PublicSlaveDnsAddress\": {\"Description\": \"Public slaves\", \"Value\": {\"Fn::GetAtt\": [\"PublicSlaveLoadBalancer\", \"DNSName\"]}}, \"DnsAddress\": {\"Description\": \"Mesos Master\", \"Value\": {\"Fn::GetAtt\": [\"ElasticLoadBalancer\", \"DNSName\"]}}}, \"Metadata\": {\"DcosImageCommit\": \"cdcdf04880a2e72540c2b609aa695efacdab4602\", \"TemplateGenerationDate\": \"2015-10-23 16:51:16.800462\"}, \"Parameters\": {\"AcceptEULA\": {\"AllowedValues\": [\"Yes\"], \"Description\": \"Please read and agree to our EULA: https://docs.mesosphere.com/community-edition-eula/\", \"Type\": \"String\"}, \"PublicSlaveInstanceCount\": {\"Description\": \"Number of public slave nodes to launch\", \"Default\": \"1\", \"Type\": \"Number\"}, \"KeyName\": {\"Description\": \"Name of SSH key to link\", \"Type\": \"AWS::EC2::KeyPair::KeyName\"}, \"SlaveInstanceCount\": {\"Description\": \"Number of slave nodes to launch\", \"Default\": \"5\", \"Type\": \"Number\"}, \"AdminLocation\": {\"AllowedPattern\": \"^([0-9]+\\\\.){3}[0-9]+\\\\/[0-9]+$\", \"MaxLength\": \"18\", \"Description\": \"The IP range to whitelist for admin access.\", \"MinLength\": \"9\", \"Type\": \"String\", \"ConstraintDescription\": \"must be a valid CIDR.\", \"Default\": \"0.0.0.0/0\"}}, \"Resources\": {\"MasterToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InternalMasterLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}, {\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"PublicSlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"5050\", \"LoadBalancerPort\": \"5050\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"2181\", \"LoadBalancerPort\": \"2181\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8181\", \"LoadBalancerPort\": \"8181\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8080\", \"LoadBalancerPort\": \"8080\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}], \"Scheme\": \"internal\"}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"PrivateSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"ElasticLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"SlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"Vpc\": {\"Properties\": {\"EnableDnsHostnames\": \"true\", \"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"VPCSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"EnableDnsSupport\": \"true\"}, \"Type\": \"AWS::EC2::VPC\"}, \"MasterInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"MasterRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"PublicSlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressThree\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"tcp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"DHCPOptions\": {\"Properties\": {\"DomainName\": {\"Fn::If\": [\"RegionIsUsEast1\", \"ec2.internal\", {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::Region\"}, \".compute.internal\"]]}]}, \"DomainNameServers\": [\"AmazonProvidedDNS\"]}, \"Type\": \"AWS::EC2::DHCPOptions\"}, \"SlaveInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"SlaveRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"SlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"SlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"SlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PrivateSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PrivateSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"SlaveInstanceCount\"}}}}, \"PrivateRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"MasterToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressOne\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"tcp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"AdminSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Enable admin access to servers\", \"SecurityGroupIngress\": [{\"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"CidrIp\": {\"Ref\": \"AdminLocation\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"PublicSlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"LoadBalancerNames\": [{\"Ref\": \"PublicSlaveLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"PublicSlaveInstanceCount\"}}}}, \"SlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"PublicSlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=3\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\", \\\"dcos-detect-ip--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\", \\\"dcos-metadata--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave_public\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveIngressFive\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"udp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"HostKeys\": {\"Properties\": {\"UserName\": {\"Ref\": \"IAMUser\"}}, \"Type\": \"AWS::IAM::AccessKey\"}, \"MasterToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"LbSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Master LB\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveIngressSix\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"udp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"MasterLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"MasterInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=3\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\", \\\"dcos-detect-ip--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\", \\\"dcos-metadata--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws_master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"MasterInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves Public\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"OutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"ExhibitorS3Bucket\": {\"Type\": \"AWS::S3::Bucket\", \"DeletionPolicy\": \"Retain\"}, \"PrivateSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicSlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressFour\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"udp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveRole\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"Slaves\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:80/\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"VPCDHCPOptionsAssociation\": {\"Properties\": {\"DhcpOptionsId\": {\"Ref\": \"DHCPOptions\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCDHCPOptionsAssociation\"}, \"PublicSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"PrivateOutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PublicSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"PrivateSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PrivateSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Private\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateInboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PrivateRoute\": {\"Properties\": {\"InstanceId\": {\"Ref\": \"NATInstance\"}, \"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}}, \"Type\": \"AWS::EC2::Route\"}, \"MasterRole\": {\"Properties\": {\"Path\": \"/\", \"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveToMasterLBIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"GroupId\": {\"Ref\": \"LbSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"IAMUser\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}]}, \"Type\": \"AWS::IAM::User\"}, \"MasterSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Masters\", \"SecurityGroupIngress\": [{\"FromPort\": \"5050\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"80\", \"IpProtocol\": \"tcp\", \"ToPort\": \"80\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8080\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8080\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"NATInstance\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"ImageId\": {\"Fn::FindInMap\": [\"NATAmi\", {\"Ref\": \"AWS::Region\"}, \"default\"]}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"InstanceType\": \"m3.medium\", \"SourceDestCheck\": \"false\", \"NetworkInterfaces\": [{\"GroupSet\": [{\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"AssociatePublicIpAddress\": \"true\", \"DeleteOnTermination\": \"true\", \"SubnetId\": {\"Ref\": \"PublicSubnet\"}, \"DeviceIndex\": \"0\"}]}, \"Type\": \"AWS::EC2::Instance\"}, \"PublicSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveIngressTwo\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"MasterServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"MasterLaunchConfig\"}, \"MaxSize\": 3, \"MinSize\": 3, \"DesiredCapacity\": 3, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-master\"}], \"LoadBalancerNames\": [{\"Ref\": \"ElasticLoadBalancer\"}, {\"Ref\": \"InternalMasterLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": 3}}}, \"InternetGateway\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}]}, \"Type\": \"AWS::EC2::InternetGateway\"}, \"GatewayToInternet\": {\"Properties\": {\"InternetGatewayId\": {\"Ref\": \"InternetGateway\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCGatewayAttachment\"}, \"SlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"SlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"false\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"SlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=3\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\", \\\"dcos-detect-ip--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\", \\\"dcos-metadata--setup_d9f7e84ca1ca0b918d8825c7f6776d9a4a9477a3\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicRoute\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"GatewayId\": {\"Ref\": \"InternetGateway\"}}, \"Type\": \"AWS::EC2::Route\"}}}"}, {"known_path": "cloudformation/single-master-spot.cloudformation.json", "stable_path": "cloudformation/4750b294d393ef4a266572345a65781a3063b575.single-master-spot.cloudformation.json", "content": "{\"Mappings\": {\"RegionToAmi\": {\"us-west-2\": {\"stable\": \"ami-ed8b90dd\"}, \"eu-west-1\": {\"stable\": \"ami-eb97bc9c\"}, \"us-west-1\": {\"stable\": \"ami-2b29ee6f\"}, \"us-gov-west-1\": {\"stable\": \"ami-796a085a\"}, \"eu-central-1\": {\"stable\": \"ami-840a0899\"}, \"sa-east-1\": {\"stable\": \"ami-3396012e\"}, \"ap-southeast-1\": {\"stable\": \"ami-46819614\"}, \"us-east-1\": {\"stable\": \"ami-05783d60\"}, \"ap-southeast-2\": {\"stable\": \"ami-f5ace5cf\"}, \"ap-northeast-1\": {\"stable\": \"ami-6c5ac56c\"}}, \"NATAmi\": {\"us-west-2\": {\"default\": \"ami-bb69128b\"}, \"eu-west-1\": {\"default\": \"ami-3760b040\"}, \"us-west-1\": {\"default\": \"ami-2b2b296e\"}, \"eu-central-1\": {\"default\": \"ami-204c7a3d\"}, \"sa-east-1\": {\"default\": \"ami-b972dba4\"}, \"ap-southeast-1\": {\"default\": \"ami-b082dae2\"}, \"us-east-1\": {\"default\": \"ami-4c9e4b24\"}, \"ap-southeast-2\": {\"default\": \"ami-996402a3\"}, \"ap-northeast-1\": {\"default\": \"ami-55c29e54\"}}, \"Parameters\": {\"PublicSlaveInstanceType\": {\"default\": \"m3.xlarge\"}, \"PrivateSubnetRange\": {\"default\": \"10.0.0.0/22\"}, \"VPCSubnetRange\": {\"default\": \"10.0.0.0/16\"}, \"PublicSubnetRange\": {\"default\": \"10.0.4.0/22\"}, \"MasterInstanceType\": {\"default\": \"m3.xlarge\"}, \"StackCreationTimeout\": {\"default\": \"PT30M\"}, \"SlaveInstanceType\": {\"default\": \"m3.xlarge\"}}}, \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"Launching the Mesosphere DCOS cluster\", \"Conditions\": {\"RegionIsUsEast1\": {\"Fn::Equals\": [{\"Ref\": \"AWS::Region\"}, \"us-east-1\"]}}, \"Outputs\": {\"PublicSlaveDnsAddress\": {\"Description\": \"Public slaves\", \"Value\": {\"Fn::GetAtt\": [\"PublicSlaveLoadBalancer\", \"DNSName\"]}}, \"DnsAddress\": {\"Description\": \"Mesos Master\", \"Value\": {\"Fn::GetAtt\": [\"ElasticLoadBalancer\", \"DNSName\"]}}}, \"Metadata\": {\"DcosImageCommit\": \"cdcdf04880a2e72540c2b609aa695efacdab4602\", \"TemplateGenerationDate\": \"2015-10-23 16:51:16.800462\"}, \"Parameters\": {\"AcceptEULA\": {\"AllowedValues\": [\"Yes\"], \"Description\": \"Please read and agree to our EULA: https://docs.mesosphere.com/community-edition-eula/\", \"Type\": \"String\"}, \"PublicSlaveInstanceCount\": {\"Description\": \"Number of public slave nodes to launch\", \"Default\": \"1\", \"Type\": \"Number\"}, \"KeyName\": {\"Description\": \"Name of SSH key to link\", \"Type\": \"AWS::EC2::KeyPair::KeyName\"}, \"SlaveInstanceCount\": {\"Description\": \"Number of slave nodes to launch\", \"Default\": \"5\", \"Type\": \"Number\"}, \"AdminLocation\": {\"AllowedPattern\": \"^([0-9]+\\\\.){3}[0-9]+\\\\/[0-9]+$\", \"MaxLength\": \"18\", \"Description\": \"The IP range to whitelist for admin access.\", \"MinLength\": \"9\", \"Type\": \"String\", \"ConstraintDescription\": \"must be a valid CIDR.\", \"Default\": \"0.0.0.0/0\"}}, \"Resources\": {\"MasterToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InternalMasterLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}, {\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"PublicSlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"5050\", \"LoadBalancerPort\": \"5050\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"2181\", \"LoadBalancerPort\": \"2181\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8181\", \"LoadBalancerPort\": \"8181\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8080\", \"LoadBalancerPort\": \"8080\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}], \"Scheme\": \"internal\"}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"PrivateSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"ElasticLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"SlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"Vpc\": {\"Properties\": {\"EnableDnsHostnames\": \"true\", \"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"VPCSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"EnableDnsSupport\": \"true\"}, \"Type\": \"AWS::EC2::VPC\"}, \"MasterInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"MasterRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"PublicSlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressThree\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"tcp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"DHCPOptions\": {\"Properties\": {\"DomainName\": {\"Fn::If\": [\"RegionIsUsEast1\", \"ec2.internal\", {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::Region\"}, \".compute.internal\"]]}]}, \"DomainNameServers\": [\"AmazonProvidedDNS\"]}, \"Type\": \"AWS::EC2::DHCPOptions\"}, \"SlaveInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"SlaveRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"SlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"SlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"SlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PrivateSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PrivateSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"SlaveInstanceCount\"}}}}, \"PrivateRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"MasterToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressOne\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"tcp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"AdminSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Enable admin access to servers\", \"SecurityGroupIngress\": [{\"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"CidrIp\": {\"Ref\": \"AdminLocation\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"PublicSlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"LoadBalancerNames\": [{\"Ref\": \"PublicSlaveLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"PublicSlaveInstanceCount\"}}}}, \"SlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"PublicSlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave_public\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"SpotPrice\": \"0.26\", \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveIngressFive\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"udp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"HostKeys\": {\"Properties\": {\"UserName\": {\"Ref\": \"IAMUser\"}}, \"Type\": \"AWS::IAM::AccessKey\"}, \"MasterToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"LbSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Master LB\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveIngressSix\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"udp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"MasterLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"MasterInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws_master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"MasterInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves Public\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"OutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"ExhibitorS3Bucket\": {\"Type\": \"AWS::S3::Bucket\", \"DeletionPolicy\": \"Retain\"}, \"PrivateSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicSlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressFour\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"udp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveRole\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"Slaves\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:80/\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"VPCDHCPOptionsAssociation\": {\"Properties\": {\"DhcpOptionsId\": {\"Ref\": \"DHCPOptions\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCDHCPOptionsAssociation\"}, \"PublicSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"PrivateOutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PublicSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"PrivateSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PrivateSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Private\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateInboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PrivateRoute\": {\"Properties\": {\"InstanceId\": {\"Ref\": \"NATInstance\"}, \"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}}, \"Type\": \"AWS::EC2::Route\"}, \"MasterRole\": {\"Properties\": {\"Path\": \"/\", \"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveToMasterLBIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"GroupId\": {\"Ref\": \"LbSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"IAMUser\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}]}, \"Type\": \"AWS::IAM::User\"}, \"MasterSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Masters\", \"SecurityGroupIngress\": [{\"FromPort\": \"5050\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"80\", \"IpProtocol\": \"tcp\", \"ToPort\": \"80\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8080\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8080\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"NATInstance\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"ImageId\": {\"Fn::FindInMap\": [\"NATAmi\", {\"Ref\": \"AWS::Region\"}, \"default\"]}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"InstanceType\": \"m3.medium\", \"SourceDestCheck\": \"false\", \"NetworkInterfaces\": [{\"GroupSet\": [{\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"AssociatePublicIpAddress\": \"true\", \"DeleteOnTermination\": \"true\", \"SubnetId\": {\"Ref\": \"PublicSubnet\"}, \"DeviceIndex\": \"0\"}]}, \"Type\": \"AWS::EC2::Instance\"}, \"PublicSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveIngressTwo\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"MasterServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"MasterLaunchConfig\"}, \"MaxSize\": 1, \"MinSize\": 1, \"DesiredCapacity\": 1, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-master\"}], \"LoadBalancerNames\": [{\"Ref\": \"ElasticLoadBalancer\"}, {\"Ref\": \"InternalMasterLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": 1}}}, \"InternetGateway\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}]}, \"Type\": \"AWS::EC2::InternetGateway\"}, \"GatewayToInternet\": {\"Properties\": {\"InternetGatewayId\": {\"Ref\": \"InternetGateway\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCGatewayAttachment\"}, \"SlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"SlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"false\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"SlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"SpotPrice\": \"0.26\", \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicRoute\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"GatewayId\": {\"Ref\": \"InternetGateway\"}}, \"Type\": \"AWS::EC2::Route\"}}}"}, {"known_path": "cloudformation/multi-master-spot.cloudformation.json", "stable_path": "cloudformation/4750b294d393ef4a266572345a65781a3063b575.multi-master-spot.cloudformation.json", "content": "{\"Mappings\": {\"RegionToAmi\": {\"us-west-2\": {\"stable\": \"ami-ed8b90dd\"}, \"eu-west-1\": {\"stable\": \"ami-eb97bc9c\"}, \"us-west-1\": {\"stable\": \"ami-2b29ee6f\"}, \"us-gov-west-1\": {\"stable\": \"ami-796a085a\"}, \"eu-central-1\": {\"stable\": \"ami-840a0899\"}, \"sa-east-1\": {\"stable\": \"ami-3396012e\"}, \"ap-southeast-1\": {\"stable\": \"ami-46819614\"}, \"us-east-1\": {\"stable\": \"ami-05783d60\"}, \"ap-southeast-2\": {\"stable\": \"ami-f5ace5cf\"}, \"ap-northeast-1\": {\"stable\": \"ami-6c5ac56c\"}}, \"NATAmi\": {\"us-west-2\": {\"default\": \"ami-bb69128b\"}, \"eu-west-1\": {\"default\": \"ami-3760b040\"}, \"us-west-1\": {\"default\": \"ami-2b2b296e\"}, \"eu-central-1\": {\"default\": \"ami-204c7a3d\"}, \"sa-east-1\": {\"default\": \"ami-b972dba4\"}, \"ap-southeast-1\": {\"default\": \"ami-b082dae2\"}, \"us-east-1\": {\"default\": \"ami-4c9e4b24\"}, \"ap-southeast-2\": {\"default\": \"ami-996402a3\"}, \"ap-northeast-1\": {\"default\": \"ami-55c29e54\"}}, \"Parameters\": {\"PublicSlaveInstanceType\": {\"default\": \"m3.xlarge\"}, \"PrivateSubnetRange\": {\"default\": \"10.0.0.0/22\"}, \"VPCSubnetRange\": {\"default\": \"10.0.0.0/16\"}, \"PublicSubnetRange\": {\"default\": \"10.0.4.0/22\"}, \"MasterInstanceType\": {\"default\": \"m3.xlarge\"}, \"StackCreationTimeout\": {\"default\": \"PT30M\"}, \"SlaveInstanceType\": {\"default\": \"m3.xlarge\"}}}, \"AWSTemplateFormatVersion\": \"2010-09-09\", \"Description\": \"Launching the Mesosphere DCOS cluster\", \"Conditions\": {\"RegionIsUsEast1\": {\"Fn::Equals\": [{\"Ref\": \"AWS::Region\"}, \"us-east-1\"]}}, \"Outputs\": {\"PublicSlaveDnsAddress\": {\"Description\": \"Public slaves\", \"Value\": {\"Fn::GetAtt\": [\"PublicSlaveLoadBalancer\", \"DNSName\"]}}, \"DnsAddress\": {\"Description\": \"Mesos Master\", \"Value\": {\"Fn::GetAtt\": [\"ElasticLoadBalancer\", \"DNSName\"]}}}, \"Metadata\": {\"DcosImageCommit\": \"cdcdf04880a2e72540c2b609aa695efacdab4602\", \"TemplateGenerationDate\": \"2015-10-23 16:51:16.800462\"}, \"Parameters\": {\"AcceptEULA\": {\"AllowedValues\": [\"Yes\"], \"Description\": \"Please read and agree to our EULA: https://docs.mesosphere.com/community-edition-eula/\", \"Type\": \"String\"}, \"PublicSlaveInstanceCount\": {\"Description\": \"Number of public slave nodes to launch\", \"Default\": \"1\", \"Type\": \"Number\"}, \"KeyName\": {\"Description\": \"Name of SSH key to link\", \"Type\": \"AWS::EC2::KeyPair::KeyName\"}, \"SlaveInstanceCount\": {\"Description\": \"Number of slave nodes to launch\", \"Default\": \"5\", \"Type\": \"Number\"}, \"AdminLocation\": {\"AllowedPattern\": \"^([0-9]+\\\\.){3}[0-9]+\\\\/[0-9]+$\", \"MaxLength\": \"18\", \"Description\": \"The IP range to whitelist for admin access.\", \"MinLength\": \"9\", \"Type\": \"String\", \"ConstraintDescription\": \"must be a valid CIDR.\", \"Default\": \"0.0.0.0/0\"}}, \"Resources\": {\"MasterToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InternalMasterLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}, {\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"PublicSlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"5050\", \"LoadBalancerPort\": \"5050\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"2181\", \"LoadBalancerPort\": \"2181\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8181\", \"LoadBalancerPort\": \"8181\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}, {\"InstancePort\": \"8080\", \"LoadBalancerPort\": \"8080\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}], \"Scheme\": \"internal\"}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"PrivateSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"ElasticLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"LbSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:5050/health\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"SlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"Vpc\": {\"Properties\": {\"EnableDnsHostnames\": \"true\", \"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"VPCSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"EnableDnsSupport\": \"true\"}, \"Type\": \"AWS::EC2::VPC\"}, \"MasterInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"MasterRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"PublicSlaveToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressThree\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"tcp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"InboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"DHCPOptions\": {\"Properties\": {\"DomainName\": {\"Fn::If\": [\"RegionIsUsEast1\", \"ec2.internal\", {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::Region\"}, \".compute.internal\"]]}]}, \"DomainNameServers\": [\"AmazonProvidedDNS\"]}, \"Type\": \"AWS::EC2::DHCPOptions\"}, \"SlaveInstanceProfile\": {\"Properties\": {\"Path\": \"/\", \"Roles\": [{\"Ref\": \"SlaveRole\"}]}, \"Type\": \"AWS::IAM::InstanceProfile\"}, \"SlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"SlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"SlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"SlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PrivateSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PrivateSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"SlaveInstanceCount\"}}}}, \"PrivateRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"MasterToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressOne\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"tcp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"AdminSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Enable admin access to servers\", \"SecurityGroupIngress\": [{\"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"CidrIp\": {\"Ref\": \"AdminLocation\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"PublicSlaveLaunchConfig\"}, \"MaxSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"MinSize\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"DesiredCapacity\": {\"Ref\": \"PublicSlaveInstanceCount\"}, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-slave\"}], \"LoadBalancerNames\": [{\"Ref\": \"PublicSlaveLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": {\"Ref\": \"PublicSlaveInstanceCount\"}}}}, \"SlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicRouteTable\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::RouteTable\"}, \"PublicSlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave_public\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"SpotPrice\": \"0.26\", \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveIngressFive\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"udp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"HostKeys\": {\"Properties\": {\"UserName\": {\"Ref\": \"IAMUser\"}}, \"Type\": \"AWS::IAM::AccessKey\"}, \"MasterToMasterIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"MasterSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"MasterSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"LbSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Master LB\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveIngressSix\": {\"Properties\": {\"FromPort\": \"5052\", \"IpProtocol\": \"udp\", \"ToPort\": \"65535\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"MasterLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"true\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"MasterInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws_master\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"IamInstanceProfile\": {\"Ref\": \"MasterInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicSlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves Public\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"OutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"ExhibitorS3Bucket\": {\"Type\": \"AWS::S3::Bucket\", \"DeletionPolicy\": \"Retain\"}, \"PrivateSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}, \"SubnetId\": {\"Ref\": \"PrivateSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicSlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveToSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"SlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PublicSlaveIngressFour\": {\"Properties\": {\"FromPort\": \"0\", \"IpProtocol\": \"udp\", \"ToPort\": \"21\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"SlaveRole\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"Slaves\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Slaves\", \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"PublicSlaveLoadBalancer\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"PublicSlaveSecurityGroup\"}], \"Subnets\": [{\"Ref\": \"PublicSubnet\"}], \"HealthCheck\": {\"UnhealthyThreshold\": \"2\", \"Interval\": \"30\", \"Timeout\": \"5\", \"Target\": \"HTTP:80/\", \"HealthyThreshold\": \"2\"}, \"Listeners\": [{\"InstancePort\": \"80\", \"LoadBalancerPort\": \"80\", \"InstanceProtocol\": \"HTTP\", \"Protocol\": \"HTTP\"}, {\"InstancePort\": \"443\", \"LoadBalancerPort\": \"443\", \"InstanceProtocol\": \"TCP\", \"Protocol\": \"TCP\"}]}, \"Type\": \"AWS::ElasticLoadBalancing::LoadBalancer\"}, \"VPCDHCPOptionsAssociation\": {\"Properties\": {\"DhcpOptionsId\": {\"Ref\": \"DHCPOptions\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCDHCPOptionsAssociation\"}, \"PublicSubnetRouteTableAssociation\": {\"Properties\": {\"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"}, \"PublicNetworkAcl\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::NetworkAcl\"}, \"PrivateOutboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"true\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PublicSubnetNetworkAclAssociation\": {\"Properties\": {\"NetworkAclId\": {\"Ref\": \"PublicNetworkAcl\"}, \"SubnetId\": {\"Ref\": \"PublicSubnet\"}}, \"Type\": \"AWS::EC2::SubnetNetworkAclAssociation\"}, \"PrivateSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PrivateSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Private\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveToPublicSlaveIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}, \"FromPort\": \"0\", \"IpProtocol\": \"-1\", \"ToPort\": \"65535\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"PrivateInboundNetworkAclEntry\": {\"Properties\": {\"RuleNumber\": \"100\", \"PortRange\": {\"To\": \"65535\", \"From\": \"0\"}, \"Egress\": \"false\", \"NetworkAclId\": {\"Ref\": \"PrivateNetworkAcl\"}, \"CidrBlock\": \"0.0.0.0/0\", \"Protocol\": \"-1\", \"RuleAction\": \"allow\"}, \"Type\": \"AWS::EC2::NetworkAclEntry\"}, \"PrivateRoute\": {\"Properties\": {\"InstanceId\": {\"Ref\": \"NATInstance\"}, \"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PrivateRouteTable\"}}, \"Type\": \"AWS::EC2::Route\"}, \"MasterRole\": {\"Properties\": {\"Path\": \"/\", \"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}], \"AssumeRolePolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Action\": [\"sts:AssumeRole\"], \"Principal\": {\"Service\": [\"ec2.amazonaws.com\"]}}], \"Version\": \"2012-10-17\"}}, \"Type\": \"AWS::IAM::Role\"}, \"SlaveToMasterLBIngress\": {\"Properties\": {\"SourceSecurityGroupId\": {\"Ref\": \"SlaveSecurityGroup\"}, \"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"GroupId\": {\"Ref\": \"LbSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"IAMUser\": {\"Properties\": {\"Policies\": [{\"PolicyDocument\": {\"Statement\": [{\"Effect\": \"Allow\", \"Resource\": [{\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"/*\"]]}, {\"Fn::Join\": [\"\", [\"arn:aws:s3:::\", {\"Ref\": \"ExhibitorS3Bucket\"}]]}], \"Action\": [\"s3:AbortMultipartUpload\", \"s3:DeleteObject\", \"s3:GetBucketAcl\", \"s3:GetBucketPolicy\", \"s3:GetObject\", \"s3:GetObjectAcl\", \"s3:ListBucket\", \"s3:ListBucketMultipartUploads\", \"s3:ListMultipartUploadParts\", \"s3:PutObject\", \"s3:PutObjectAcl\"]}, {\"Effect\": \"Allow\", \"Resource\": [{\"Ref\": \"AWS::StackId\"}, {\"Fn::Join\": [\"\", [{\"Ref\": \"AWS::StackId\"}, \"/*\"]]}], \"Action\": [\"cloudformation:*\"]}, {\"Effect\": \"Allow\", \"Resource\": \"*\", \"Action\": [\"ec2:DescribeKeyPairs\", \"ec2:DescribeSubnets\", \"autoscaling:DescribeLaunchConfigurations\", \"autoscaling:UpdateAutoScalingGroup\", \"autoscaling:DescribeAutoScalingGroups\", \"autoscaling:DescribeScalingActivities\", \"elasticloadbalancing:DescribeLoadBalancers\"]}], \"Version\": \"2012-10-17\"}, \"PolicyName\": \"root\"}]}, \"Type\": \"AWS::IAM::User\"}, \"MasterSecurityGroup\": {\"Properties\": {\"GroupDescription\": \"Mesos Masters\", \"SecurityGroupIngress\": [{\"FromPort\": \"5050\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"80\", \"IpProtocol\": \"tcp\", \"ToPort\": \"80\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8080\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8080\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"8181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"8181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}, {\"FromPort\": \"2181\", \"IpProtocol\": \"tcp\", \"ToPort\": \"2181\", \"SourceSecurityGroupId\": {\"Ref\": \"LbSecurityGroup\"}}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::SecurityGroup\"}, \"NATInstance\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"ImageId\": {\"Fn::FindInMap\": [\"NATAmi\", {\"Ref\": \"AWS::Region\"}, \"default\"]}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"InstanceType\": \"m3.medium\", \"SourceDestCheck\": \"false\", \"NetworkInterfaces\": [{\"GroupSet\": [{\"Ref\": \"SlaveSecurityGroup\"}, {\"Ref\": \"MasterSecurityGroup\"}, {\"Ref\": \"AdminSecurityGroup\"}], \"AssociatePublicIpAddress\": \"true\", \"DeleteOnTermination\": \"true\", \"SubnetId\": {\"Ref\": \"PublicSubnet\"}, \"DeviceIndex\": \"0\"}]}, \"Type\": \"AWS::EC2::Instance\"}, \"PublicSubnet\": {\"Properties\": {\"CidrBlock\": {\"Fn::FindInMap\": [\"Parameters\", \"PublicSubnetRange\", \"default\"]}, \"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}], \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::Subnet\"}, \"PublicSlaveIngressTwo\": {\"Properties\": {\"FromPort\": \"23\", \"IpProtocol\": \"tcp\", \"ToPort\": \"5050\", \"CidrIp\": \"0.0.0.0/0\", \"GroupId\": {\"Ref\": \"PublicSlaveSecurityGroup\"}}, \"Type\": \"AWS::EC2::SecurityGroupIngress\"}, \"MasterServerGroup\": {\"Properties\": {\"LaunchConfigurationName\": {\"Ref\": \"MasterLaunchConfig\"}, \"MaxSize\": 1, \"MinSize\": 1, \"DesiredCapacity\": 1, \"Tags\": [{\"Key\": \"role\", \"PropagateAtLaunch\": \"true\", \"Value\": \"mesos-master\"}], \"LoadBalancerNames\": [{\"Ref\": \"ElasticLoadBalancer\"}, {\"Ref\": \"InternalMasterLoadBalancer\"}], \"AvailabilityZones\": [{\"Fn::GetAtt\": [\"PublicSubnet\", \"AvailabilityZone\"]}], \"VPCZoneIdentifier\": [{\"Ref\": \"PublicSubnet\"}]}, \"Type\": \"AWS::AutoScaling::AutoScalingGroup\", \"CreationPolicy\": {\"ResourceSignal\": {\"Timeout\": {\"Fn::FindInMap\": [\"Parameters\", \"StackCreationTimeout\", \"default\"]}, \"Count\": 1}}}, \"InternetGateway\": {\"Properties\": {\"Tags\": [{\"Key\": \"Application\", \"Value\": {\"Ref\": \"AWS::StackName\"}}, {\"Key\": \"Network\", \"Value\": \"Public\"}]}, \"Type\": \"AWS::EC2::InternetGateway\"}, \"GatewayToInternet\": {\"Properties\": {\"InternetGatewayId\": {\"Ref\": \"InternetGateway\"}, \"VpcId\": {\"Ref\": \"Vpc\"}}, \"Type\": \"AWS::EC2::VPCGatewayAttachment\"}, \"SlaveLaunchConfig\": {\"Properties\": {\"SecurityGroups\": [{\"Ref\": \"SlaveSecurityGroup\"}], \"ImageId\": {\"Fn::FindInMap\": [\"RegionToAmi\", {\"Ref\": \"AWS::Region\"}, \"stable\"]}, \"AssociatePublicIpAddress\": \"false\", \"BlockDeviceMappings\": [{\"DeviceName\": \"/dev/sdb\", \"VirtualName\": \"ephemeral0\"}], \"InstanceType\": {\"Fn::FindInMap\": [\"Parameters\", \"SlaveInstanceType\", \"default\"]}, \"UserData\": {\"Fn::Base64\": {\"Fn::Join\": [\"\", [\"#cloud-config\\n\", \"\\\"coreos\\\":\\n\", \"  \\\"units\\\":\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      etcd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      update-engine.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"mask\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      locksmithd.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      stop\\n\", \"    \\\"name\\\": |-\\n\", \"      systemd-resolved.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Formats the /var/lib ephemeral drive\\n\", \"      Before=var-lib.mount dbus.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      RemainAfterExit=yes\\n\", \"      ExecStart=/bin/bash -c \\\"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\\\"\\n\", \"    \\\"name\\\": |-\\n\", \"      format-var-lib-ephemeral.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Mount /var/lib\\n\", \"      Before=dbus.service\\n\", \"      [Mount]\\n\", \"      What=/dev/xvdb\\n\", \"      Where=/var/lib\\n\", \"      Type=ext4\\n\", \"    \\\"name\\\": |-\\n\", \"      var-lib.mount\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Before=dcos.target\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\\n\", \"      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-link-env.service\\n\", \"  - \\\"content\\\": |\\n\", \"      [Unit]\\n\", \"      Description=Download the DCOS\\n\", \"      After=network-online.target\\n\", \"      Wants=network-online.target\\n\", \"      ConditionPathExists=!/opt/mesosphere/\\n\", \"      [Service]\\n\", \"      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\\n\", \"      Type=oneshot\\n\", \"      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\\n\", \"      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\\n\", \"      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\\n\", \"      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-download.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Prep the Pkgpanda working directories for this host.\\n\", \"      Requires=dcos-download.service\\n\", \"      After=dcos-download.service\\n\", \"      [Service]\\n\", \"      Type=oneshot\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\\n\", \"      [Install]\\n\", \"      WantedBy=multi-user.target\\n\", \"    \\\"enable\\\": !!bool |-\\n\", \"      true\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-setup.service\\n\", \"  - \\\"command\\\": |-\\n\", \"      start\\n\", \"    \\\"content\\\": |-\\n\", \"      [Unit]\\n\", \"      Description=Signal CloudFormation Success\\n\", \"      After=dcos.target\\n\", \"      Requires=dcos.target\\n\", \"      ConditionPathExists=!/var/lib/dcos-cfn-signal\\n\", \"      [Service]\\n\", \"      Type=simple\\n\", \"      Restart=on-failure\\n\", \"      StartLimitInterval=0\\n\", \"      RestartSec=15s\\n\", \"      EnvironmentFile=/opt/mesosphere/environment\\n\", \"      EnvironmentFile=/opt/mesosphere/etc/cloudenv\\n\", \"      Environment=\\\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\\\"\\n\", \"      ExecStartPre=/bin/ping -c1 leader.mesos\\n\", \"      ExecStartPre=/opt/mesosphere/bin/cfn-signal\\n\", \"      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\\n\", \"    \\\"name\\\": |-\\n\", \"      dcos-cfn-signal.service\\n\", \"  \\\"update\\\":\\n\", \"    \\\"reboot-strategy\\\": |-\\n\", \"      off\\n\", \"\\\"write_files\\\":\\n\", \"- \\\"content\\\": |\\n\", \"    {\\n\", \"      \\\"environment\\\": {\\n\", \"        \\\"PROVIDER\\\": \\\"aws\\\"\\n\", \"      }\\n\", \"    }\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\\n\", \"- \\\"content\\\": |\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_STACK_ID=\", {\"Ref\": \"AWS::StackId\"}, \"\", \"\\n\", \"    AWS_STACK_NAME=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"    AWS_IAM_MASTER_ROLE_NAME=\", {\"Ref\": \"MasterRole\"}, \"\", \"\\n\", \"    AWS_IAM_SLAVE_ROLE_NAME=\", {\"Ref\": \"SlaveRole\"}, \"\", \"\\n\", \"    AWS_ACCESS_KEY_ID=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    AWS_SECRET_ACCESS_KEY=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"    ZOOKEEPER_CLUSTER_SIZE=1\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cloudenv\\n\", \"- \\\"content\\\": |\\n\", \"    MESOS_CLUSTER=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\\n\", \"- \\\"content\\\": |\\n\", \"    EXHIBITOR_BACKEND=AWS_S3\\n\", \"    AWS_REGION=\", {\"Ref\": \"AWS::Region\"}, \"\", \"\\n\", \"    AWS_S3_BUCKET=\", {\"Ref\": \"ExhibitorS3Bucket\"}, \"\", \"\\n\", \"    AWS_S3_PREFIX=\", {\"Ref\": \"AWS::StackName\"}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\\n\", \"- \\\"content\\\": |\\n\", \"    com.netflix.exhibitor.s3.access-key-id=\", {\"Ref\": \"HostKeys\"}, \"\", \"\\n\", \"    com.netflix.exhibitor.s3.access-secret-key=\", {\"Fn::GetAtt\": [\"HostKeys\", \"SecretAccessKey\"]}, \"\", \"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor.properties\\n\", \"- \\\"content\\\": |-\\n\", \"    MASTER_SOURCE=exhibitor\\n\", \"    EXHIBITOR_ADDRESS=\", {\"Fn::GetAtt\": [\"InternalMasterLoadBalancer\", \"DNSName\"]}, \"\", \"\\n\", \"    RESOLVERS=10.0.0.2\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\\n\", \"- \\\"content\\\": |\\n\", \"    /url\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/repository-url\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |\\n\", \"    BOOTSTRAP_ID=12345\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/bootstrap-id\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": |-\\n\", \"    [\\\"dcos-config--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-detect-ip--setup_4750b294d393ef4a266572345a65781a3063b575\\\", \\\"dcos-metadata--setup_4750b294d393ef4a266572345a65781a3063b575\\\"]\\n\", \"  \\\"owner\\\": |-\\n\", \"    root\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/setup-flags/cluster-packages.json\\n\", \"  \\\"permissions\\\": !!int |-\\n\", \"    420\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/slave\\n\", \"- \\\"content\\\": \\\"\\\"\\n\", \"  \\\"path\\\": |-\\n\", \"    /etc/mesosphere/roles/aws\\n\"]]}}, \"KeyName\": {\"Ref\": \"KeyName\"}, \"SpotPrice\": \"0.26\", \"IamInstanceProfile\": {\"Ref\": \"SlaveInstanceProfile\"}}, \"Type\": \"AWS::AutoScaling::LaunchConfiguration\"}, \"PublicRoute\": {\"DependsOn\": \"GatewayToInternet\", \"Properties\": {\"DestinationCidrBlock\": \"0.0.0.0/0\", \"RouteTableId\": {\"Ref\": \"PublicRouteTable\"}, \"GatewayId\": {\"Ref\": \"InternetGateway\"}}, \"Type\": \"AWS::EC2::Route\"}}}"}, {"known_path": "aws.html", "upload_args": {"ContentType": "text/html; charset=utf-8"}, "content": "<!doctype html>\n<html>\n<head>\n  <title>DCOS channel channel AWS CloudFormation</title>\n</head>\n<body>\n<h1>DCOS channel channel AWS CloudFormation</h1>\n<ul>\n  <li>For more information on creating a DCOS cluster, see the <a href='https://docs.mesosphere.com/install/awscluster/'>Mesosphere documentation</a>.</li>\n</ul>\n<table>\n<tr><th>Region Name</th><th>Region Code</th><th>Single Master</th><th>HA: Three Master</th></tr>\n<tr><td>US West (N. California)</td><td>us-west-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>US West (Oregon)</td><td>us-west-2</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>US East (N. Virginia)</td><td>us-east-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>South America (Sao Paulo)</td><td>sa-east-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=sa-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=sa-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>EU (Ireland)</td><td>eu-west-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>EU (Frankfurt)</td><td>eu-central-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-central-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-central-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>Asia Pacific (Tokyo)</td><td>ap-northeast-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>Asia Pacific (Singapore)</td><td>ap-southeast-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>Asia Pacific (Sydney)</td><td>ap-southeast-2</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr>\n</table>\n\n<h2>AWS Spot Instance Clusters</h2>\nUse when you just need a short cluster, or are doing a scale test to reduce cost dramatically.\n<table>\n<tr><th>Region Name</th><th>Region Code</th><th>Single Master</th><th>HA: Three Master</th></tr>\n<tr><td>US West (N. California)</td><td>us-west-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>US West (Oregon)</td><td>us-west-2</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-west-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>US East (N. Virginia)</td><td>us-east-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>South America (Sao Paulo)</td><td>sa-east-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=sa-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=sa-east-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>EU (Ireland)</td><td>eu-west-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-west-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>EU (Frankfurt)</td><td>eu-central-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-central-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=eu-central-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>Asia Pacific (Tokyo)</td><td>ap-northeast-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-northeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>Asia Pacific (Singapore)</td><td>ap-southeast-1</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-1#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr><tr><td>Asia Pacific (Sydney)</td><td>ap-southeast-2</td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/single-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td><td><a href='https://console.aws.amazon.com/cloudformation/home?region=ap-southeast-2#/stacks/new?templateURL=https://s3.amazonaws.com/downloads.mesosphere.io/dcos/channel/cloudformation/multi-master-spot.cloudformation.json'><img src='https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png' alt='Launch stack button'></a></td></tr>\n</table>\n\n\n<h2>Cluster Types</h2>\n<h3>Single-Master</h3>\n<p>Spawns a cluster with 1 master and 5 slaves. Should be suitable for running basic tests.</p>\n<h3>HA: Three Master</h3>\n<p>Spawns a cluster with 3 masters and 5 slaves. HA. Capable of basic production workloads, as well as testing how frameworks interact with master-failover.</p>\n<footer>\n<pre>\nDCOS Release: tag\nDCOS Commit: None\n</pre>\n</footer>\n</body>\n</html>"}]}, "vagrant": {"extra_packages": ["dcos-detect-ip--setup_7fd129d6f4f586fb37032c371d5e176ae4523518", "dcos-metadata--setup_7fd129d6f4f586fb37032c371d5e176ae4523518", "dcos-config--setup_7fd129d6f4f586fb37032c371d5e176ae4523518"], "files": [{"known_path": "make_dcos_vagrant.sh", "upload_args": {"ContentType": "application/x-sh; charset=utf-8"}, "stable_path": "make_vagrant/7fd129d6f4f586fb37032c371d5e176ae4523518.sh", "content": "#!/bin/bash\n# GENERATED by dcos-image\n# commit: cdcdf04880a2e72540c2b609aa695efacdab4602\n# date: 2015-10-23 16:51:16.800462\n#\n#\n# This file is (C) 2015 Mesosphere, Inc. (\"Mesosphere\"). Mesosphere licenses this\n# file to you solely pursuant to the agreement between Mesosphere and you (if\n# any).  If there is no such agreement, the following terms apply (and you may\n# not use this file except in compliance with such terms):\n#\n# 1) Subject to your compliance with the following terms, Mesosphere hereby\n#    grants you a nonexclusive, limited, personal, nonsublicensable,\n#    nontransferable, royalty-free license to use this file solely for your\n#    internal business purposes.\n# 2) You may not (and agree not to, and not to authorize or enable others to),\n#    directly or indirectly:\n#      (a) copy, distribute, rent, lease, timeshare, operate a service bureau,\n#          or otherwise use for the benefit of a third party, this file; or\n#      (b) remove any proprietary notices from this file.  Except as expressly\n#          set forth herein, as between you and Mesosphere, Mesosphere retains\n#          all right, title and interest in and to this file.\n# 3) Unless required by applicable law or otherwise agreed to in writing,\n#    Mesosphere provides this file on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n#    CONDITIONS OF ANY KIND, either express or implied, including, without\n#    limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,\n#    MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.\n# 4) In no event and under no legal theory, whether in tort (including\n#    negligence), contract, or otherwise, unless required by applicable law\n#    (such as deliberate and grossly negligent acts) or agreed to in writing,\n#    shall Mesosphere be liable to you for damages, including any direct,\n#    indirect, special, incidental, or consequential damages of any character\n#    arising as a result of these terms or out of the use or inability to use\n#    this file (including but not limited to damages for loss of goodwill, work\n#    stoppage, computer failure or malfunction, or any and all other commercial\n#    damages or losses), even if Mesosphere has been advised of the possibility\n#    of such damages.\n#\n\nset -o errexit -o nounset -o pipefail\n\nfunction usage {\ncat <<USAGE\n USAGE: $(basename \"$0\")\n\n  Generate a Vagrantfile + basic config for a single-host DCOS App development environment.\nUSAGE\n}\n\nif [ $# -ne 0 ]; then\n  usage\n  exit 1\nfi\n\nif [ -e user-data ]; then\n  echo \"ERROR: user-data file already exists. Cowardly refusing to overwrite it.\"\n  exit 1\nfi\n\nif [ -e Vagrantfile ]; then\n  echo \"ERROR: Vagrantfile file already exists. Cowardly refusing to overwrite it.\"\n  exit 1\nfi\n\nif [ -e config.rb ]; then\n  echo \"ERROR: config.rb file already exists. Cowardly refusing to overwrite it.\"\n  exit 1\nfi\n\ncat <<'EOF' > user-data\n#cloud-config\n\"coreos\":\n  \"units\":\n  - \"command\": |-\n      stop\n    \"mask\": !!bool |-\n      true\n    \"name\": |-\n      etcd.service\n  - \"command\": |-\n      stop\n    \"mask\": !!bool |-\n      true\n    \"name\": |-\n      update-engine.service\n  - \"command\": |-\n      stop\n    \"mask\": !!bool |-\n      true\n    \"name\": |-\n      locksmithd.service\n  - \"command\": |-\n      stop\n    \"name\": |-\n      systemd-resolved.service\n  - \"command\": |-\n      start\n    \"content\": |\n      [Unit]\n      Before=dcos.target\n      [Service]\n      Type=oneshot\n      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n    \"name\": |-\n      dcos-link-env.service\n  - \"content\": |\n      [Unit]\n      Description=Download the DCOS\n      After=network-online.target\n      Wants=network-online.target\n      ConditionPathExists=!/opt/mesosphere/\n      [Service]\n      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n      Type=oneshot\n      ExecStartPre=/usr/bin/curl -f --retry 20 -C - -o /tmp/bootstrap.tar.xz /url/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n    \"name\": |-\n      dcos-download.service\n  - \"command\": |-\n      start\n    \"content\": |-\n      [Unit]\n      Description=Prep the Pkgpanda working directories for this host.\n      Requires=dcos-download.service\n      After=dcos-download.service\n      [Service]\n      Type=oneshot\n      EnvironmentFile=/opt/mesosphere/environment\n      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n      [Install]\n      WantedBy=multi-user.target\n    \"enable\": !!bool |-\n      true\n    \"name\": |-\n      dcos-setup.service\n  \"update\":\n    \"reboot-strategy\": |-\n      off\n\"write_files\":\n- \"content\": |\n    {\n      \"environment\": {\n        \"PROVIDER\": \"vagrant\"\n      }\n    }\n  \"path\": |-\n    /etc/mesosphere/setup-packages/dcos-provider-vagrant--setup/pkginfo.json\n- \"content\": |\n    ZOOKEEPER_CLUSTER_SIZE=1\n  \"path\": |-\n    /etc/mesosphere/setup-packages/dcos-provider-vagrant--setup/etc/cloudenv\n- \"content\": |\n    MESOS_CLUSTER=Vagrant_SingleNode\n  \"path\": |-\n    /etc/mesosphere/setup-packages/dcos-provider-vagrant--setup/etc/mesos-master-provider\n- \"content\": |-\n    EXHIBITOR_BACKEND=SHARED_FS\n    ZOOKEEPER_CLUSTER_SIZE=1\n    EXHIBITOR_FSCONFIGDIR=/var/run/exhibitor\n  \"path\": |-\n    /etc/mesosphere/setup-packages/dcos-provider-vagrant--setup/etc/exhibitor\n- \"content\": |\n    /url\n  \"owner\": |-\n    root\n  \"path\": |-\n    /etc/mesosphere/setup-flags/repository-url\n  \"permissions\": !!int |-\n    420\n- \"content\": |\n    BOOTSTRAP_ID=12345\n  \"owner\": |-\n    root\n  \"path\": |-\n    /etc/mesosphere/setup-flags/bootstrap-id\n  \"permissions\": !!int |-\n    420\n- \"content\": |-\n    [\"dcos-config--setup_7fd129d6f4f586fb37032c371d5e176ae4523518\", \"dcos-detect-ip--setup_7fd129d6f4f586fb37032c371d5e176ae4523518\", \"dcos-metadata--setup_7fd129d6f4f586fb37032c371d5e176ae4523518\"]\n  \"owner\": |-\n    root\n  \"path\": |-\n    /etc/mesosphere/setup-flags/cluster-packages.json\n  \"permissions\": !!int |-\n    420\n- \"content\": \"\"\n  \"path\": |-\n    /etc/mesosphere/roles/master\n- \"content\": \"\"\n  \"path\": |-\n    /etc/mesosphere/roles/slave\n- \"content\": \"\"\n  \"path\": |-\n    /etc/mesosphere/roles/vagrant\n\nEOF\n\ncat <<'EOF' > Vagrantfile\n# -*- mode: ruby -*-\n# # vi: set ft=ruby :\n\nrequire 'fileutils'\n\nVagrant.require_version \">= 1.6.0\"\n\nCLOUD_CONFIG_PATH = File.join(File.dirname(__FILE__), \"user-data\")\nCONFIG = File.join(File.dirname(__FILE__), \"config.rb\")\n\n# Defaults for config options defined in CONFIG\n$num_instances = 1\n$instance_name_prefix = \"core\"\n$update_channel = \"stable\"\n$enable_serial_logging = false\n$share_home = false\n$vm_gui = false\n$vm_memory = 1024\n$vm_cpus = 1\n$shared_folders = {}\n$forwarded_ports = {}\n\n# Attempt to apply the deprecated environment variable NUM_INSTANCES to\n# $num_instances while allowing config.rb to override it\nif ENV[\"NUM_INSTANCES\"].to_i > 0 && ENV[\"NUM_INSTANCES\"]\n  $num_instances = ENV[\"NUM_INSTANCES\"].to_i\nend\n\nif File.exist?(CONFIG)\n  require CONFIG\nend\n\n# Use old vb_xxx config variables when set\ndef vm_gui\n  $vb_gui.nil? ? $vm_gui : $vb_gui\nend\n\ndef vm_memory\n  $vb_memory.nil? ? $vm_memory : $vb_memory\nend\n\ndef vm_cpus\n  $vb_cpus.nil? ? $vm_cpus : $vb_cpus\nend\n\nVagrant.configure(\"2\") do |config|\n  # always use Vagrants insecure key\n  config.ssh.insert_key = false\n\n  config.vm.box = \"coreos-%s\" % $update_channel\n  config.vm.box_version = \">= 308.0.1\"\n  config.vm.box_url = \"http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json\" % $update_channel\n\n  [\"vmware_fusion\", \"vmware_workstation\"].each do |vmware|\n    config.vm.provider vmware do |v, override|\n      override.vm.box_url = \"http://%s.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json\" % $update_channel\n    end\n  end\n\n  config.vm.provider :virtualbox do |v|\n    # On VirtualBox, we don't have guest additions or a functional vboxsf\n    # in CoreOS, so tell Vagrant that so it can be smarter.\n    v.check_guest_additions = false\n    v.functional_vboxsf     = false\n  end\n\n  # plugin conflict\n  if Vagrant.has_plugin?(\"vagrant-vbguest\") then\n    config.vbguest.auto_update = false\n  end\n\n  (1..$num_instances).each do |i|\n    config.vm.define vm_name = \"%s-%02d\" % [$instance_name_prefix, i] do |config|\n      config.vm.hostname = vm_name\n\n      if $enable_serial_logging\n        logdir = File.join(File.dirname(__FILE__), \"log\")\n        FileUtils.mkdir_p(logdir)\n\n        serialFile = File.join(logdir, \"%s-serial.txt\" % vm_name)\n        FileUtils.touch(serialFile)\n\n        [\"vmware_fusion\", \"vmware_workstation\"].each do |vmware|\n          config.vm.provider vmware do |v, override|\n            v.vmx[\"serial0.present\"] = \"TRUE\"\n            v.vmx[\"serial0.fileType\"] = \"file\"\n            v.vmx[\"serial0.fileName\"] = serialFile\n            v.vmx[\"serial0.tryNoRxLoss\"] = \"FALSE\"\n          end\n        end\n\n        config.vm.provider :virtualbox do |vb, override|\n          vb.customize [\"modifyvm\", :id, \"--uart1\", \"0x3F8\", \"4\"]\n          vb.customize [\"modifyvm\", :id, \"--uartmode1\", serialFile]\n        end\n      end\n\n      if $expose_docker_tcp\n        config.vm.network \"forwarded_port\", guest: 2375, host: ($expose_docker_tcp + i - 1), auto_correct: true\n      end\n\n      $forwarded_ports.each do |guest, host|\n\tconfig.vm.network \"forwarded_port\", guest: guest, host: host, auto_correct: true\n      end\n\n      [\"vmware_fusion\", \"vmware_workstation\"].each do |vmware|\n        config.vm.provider vmware do |v|\n          v.gui = vm_gui\n          v.vmx['memsize'] = vm_memory\n          v.vmx['numvcpus'] = vm_cpus\n        end\n      end\n\n      config.vm.provider :virtualbox do |vb|\n        vb.gui = vm_gui\n        vb.memory = vm_memory\n        vb.cpus = vm_cpus\n      end\n\n      ip = \"172.17.8.#{i+100}\"\n      config.vm.network :private_network, ip: ip\n\n      # Uncomment below to enable NFS for sharing the host machine into the coreos-vagrant VM.\n      #config.vm.synced_folder \".\", \"/home/core/share\", id: \"core\", :nfs => true, :mount_options => ['nolock,vers=3,udp']\n      $shared_folders.each_with_index do |(host_folder, guest_folder), index|\n        config.vm.synced_folder host_folder.to_s, guest_folder.to_s, id: \"core-share%02d\" % index, nfs: true, mount_options: ['nolock,vers=3,udp']\n      end\n\n      if $share_home\n        config.vm.synced_folder ENV['HOME'], ENV['HOME'], id: \"home\", :nfs => true, :mount_options => ['nolock,vers=3,udp']\n      end\n\n      if File.exist?(CLOUD_CONFIG_PATH)\n        config.vm.provision :file, :source => \"#{CLOUD_CONFIG_PATH}\", :destination => \"/tmp/vagrantfile-user-data\"\n        config.vm.provision :shell, :inline => \"mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/\", :privileged => true\n      end\n\n    end\n  end\nend\n\nEOF\n\ncat <<'EOF' > config.rb\n# Size of the CoreOS cluster created by Vagrant\n$num_instances=1\n\n# Used to fetch a new discovery token for a cluster of size $num_instances\n$new_discovery_url=\"https://discovery.etcd.io/new?size=#{$num_instances}\"\n\n# To automatically replace the discovery token on 'vagrant up', uncomment\n# the lines below:\n#\n#if File.exists?('user-data') && ARGV[0].eql?('up')\n#  require 'open-uri'\n#  require 'yaml'\n#\n#  token = open($new_discovery_url).read\n#\n#  data = YAML.load(IO.readlines('user-data')[1..-1].join)\n#  if data['coreos'].key? 'etcd'\n#    data['coreos']['etcd']['discovery'] = token\n#  end\n#  if data['coreos'].key? 'etcd2'\n#    data['coreos']['etcd2']['discovery'] = token\n#  end\n#\n#  yaml = YAML.dump(data)\n#  File.open('user-data', 'w') { |file| file.write(\"#cloud-config\\n\\n#{yaml}\") }\n#end\n#\n\n#\n# coreos-vagrant is configured through a series of configuration\n# options (global ruby variables) which are detailed below. To modify\n# these options, first copy this file to \"config.rb\". Then simply\n# uncomment the necessary lines, leaving the $, and replace everything\n# after the equals sign..\n\n# Change basename of the VM\n# The default value is \"core\", which results in VMs named starting with\n# \"core-01\" through to \"core-${num_instances}\".\n$instance_name_prefix=\"dcos\"\n\n# Official CoreOS channel from which updates should be downloaded\n$update_channel='stable'\n\n# Log the serial consoles of CoreOS VMs to log/\n# Enable by setting value to true, disable with false\n# WARNING: Serial logging is known to result in extremely high CPU usage with\n# VirtualBox, so should only be used in debugging situations\n#$enable_serial_logging=false\n\n# Enable port forwarding of Docker TCP socket\n# Set to the TCP port you want exposed on the *host* machine, default is 2375\n# If 2375 is used, Vagrant will auto-increment (e.g. in the case of $num_instances > 1)\n# You can then use the docker tool locally by setting the following env var:\n#   export DOCKER_HOST='tcp://127.0.0.1:2375'\n#$expose_docker_tcp=2375\n\n# Enable NFS sharing of your home directory ($HOME) to CoreOS\n# It will be mounted at the same path in the VM as on the host.\n# Example: /Users/foobar -> /Users/foobar\n#$share_home=false\n\n# Customize VMs\n#$vm_gui = false\n$vm_memory = 4096\n$vm_cpus = 4\n\n# Share additional folders to the CoreOS VMs\n# For example,\n# $shared_folders = {'/path/on/host' => '/path/on/guest', '/home/foo/app' => '/app'}\n# or, to map host folders to guest folders of the same name,\n# $shared_folders = Hash[*['/home/foo/app1', '/home/foo/app2'].map{|d| [d, d]}.flatten]\n#$shared_folders = {'./configdrive' => '/media/configdrive'}\n\n# Enable port forwarding from guest(s) to host machine, syntax is: { 80 => 8080 }, auto correction is enabled by default.\n$forwarded_ports = { 80 => 5080, 443 => 5443, 8181 => 58181 }\n\nEOF\n\necho 'Vagrant based DCOS app-development VM ready to start. To start the cluster run:'\necho '$ vagrant up'"}]}}
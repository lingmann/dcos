#!/usr/bin/env python3
"""Azure Image Creation, Management, Testing"""

import os

import requests


class AzureClient(object):
    API_VERSION = '2015-01-01'

    @staticmethod
    def createFromEnvCreds():
        subscription_id = os.environ.get('AZURE_SUBSCRIPTION_ID')
        tenant_id = os.environ.get('AZURE_TENANT_ID')
        client_id = os.environ.get('AZURE_CLIENT_ID')
        client_secret = os.environ.get('AZURE_CLIENT_SECRET')

        return AzureClient(subscription_id=subscription_id,
                           tenant_id=tenant_id,
                           client_id=client_id,
                           client_secret=client_secret)

    def __init__(self, subscription_id, tenant_id, client_id, client_secret):
        self._subscription_id = subscription_id
        self._tenant_id = tenant_id
        self._client_id = client_id
        self._client_secret = client_secret

        # TODO(mj): These two need to be autogenerated, created, and destroyed by API
        self._resource_group_name = 'mj-2'
        self._deployment_name = 'verify_dummy'

        self._oauth_endpoint = 'https://login.microsoftonline.com/%s/oauth2/token' % (self._tenant_id)

    def get_token_from_client_credentials(self, endpoint, client_id, client_secret):
        payload = {'grant_type': 'client_credentials',
                   'client_id': client_id,
                   'client_secret': client_secret,
                   'resource': 'https://management.core.windows.net/',
                   }
        response = requests.post(endpoint, data=payload).json()
        return response['access_token']

    def get_auth_token(self):
        # TODO(mj): Make this cache the token
        return self.get_token_from_client_credentials(
            endpoint=self._oauth_endpoint,
            client_id=self._client_id,
            client_secret=self._client_secret
            )

    def verify(self, template_body_json, template_parameters):
        endpoint = 'https://management.azure.com/subscriptions/%s/resourcegroups/%s/providers/microsoft.resources/deployments/%s/validate' % (self._subscription_id, self._resource_group_name, self._deployment_name) # flake8: noqa
        params = {'api-version': AzureClient.API_VERSION}

        token = self.get_auth_token()
        headers = {'Authorization': 'Bearer %s' % (token)}

        template_json = self.get_template_json(template_body_json=template_body_json,
                                               template_parameters=template_parameters)
        r = requests.post(endpoint,
                          headers=headers,
                          params=params,
                          json=template_json)

        errors = r.json().get('error')
        if errors:
            raise Exception('Failed verification: %s' % errors)

    def get_template_deployment_status(self):
        endpoint = 'https://management.azure.com/subscriptions/%s/resourcegroups/%s/providers/microsoft.resources/deployments/%s' % (self._subscription_id, self._resource_group_name, self._deployment_name) # flake8: noqa

        params = {'api-version': AzureClient.API_VERSION}

        token = self.get_auth_token()
        headers = {'Authorization': 'Bearer %s' % (token)}

        r = requests.get(endpoint,
                         headers=headers,
                         params=params,
                         json=template_json)

        response_properties = r.get('properties')
        provisioning_state = response_properties.get('provisioningState')

        return provisioning_state

    def create_template_deployment(self, template_body_json, template_parameters):

        endpoint = 'https://management.azure.com/subscriptions/%s/resourcegroups/%s/providers/microsoft.resources/deployments/%s' % (self._subscription_id, self._resource_group_name, self._deployment_name)

        params = {'api-version': AzureClient.API_VERSION}

        token = self.get_auth_token()
        headers = {'Authorization': 'Bearer %s' % (token)}

        template_json = self.get_template_json(template_body_json=template_body_json,
                                               template_parameters=template_parameters)

        r = requests.put(endpoint,
                         headers=headers,
                         params=params,
                         json=template_json)

        response_properties = r.get('properties')
        provisioning_state = response_properties.get('provisioningState')

        return provisioning_state

    def get_template_json(self, template_body_json, template_parameters):
        return {"properties":
                {"template": template_body_json,
                 "mode": "Incremental",
                 "parameters": template_parameters
                 }
                }
